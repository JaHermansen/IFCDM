import { LitElement } from "lit";
import { TableDataTransform, TableGroupData, TableRowData, TableRowTemplate } from "./src";
/**
 * Represents a column in the table.
 *
 * @property name - The name of the column.
 * @property width - The width of the column.
 */
export interface ColumnData {
    /** The name of the column. */
    name: string;
    /** The width of the column. */
    width: string;
    forceDataTransform?: boolean;
}
/**
 * A custom table web component for BIM applications. HTML tag: bim-table
 */
export declare class Table extends LitElement {
    /**
     * CSS styles for the component.
     */
    static styles: import("lit").CSSResult[];
    private _columnsChange;
    private _filteredData;
    /**
     * A boolean property that determines whether the table headers are hidden.
     *
     * @remarks
     * This property can be used to hide the table headers when needed.
     *
     * @defaultValue false
     *
     * @example
     * ```typescript
     * table.headersHidden = true;
     * ```
     * @example
     * ```html
     * <bim-table headers-hidden></bim-table>
     * ```
     */
    headersHidden: boolean;
    minColWidth: string;
    private _columns;
    /**
     * Sets the columns for the table.
     * This property allows you to define the columns order for the table.
     * If this is not set, it will be computed from the `table.data` object.
     * The columns can be provided as an array of strings or objects of type `ColumnData`.
     * If the columns are provided as strings, they will be converted to `ColumnData` objects with a default width.
     *
     * @param value - An array of strings or objects of type `ColumnData`.
     *
     * @example
     * ```typescript
     * const columns: (string | ColumnData)[] = [
     *   "Column 1",
     *   "Column 2",
     *   { name: "Column 3", width: "200px" },
     * ];
     * table.columns = columns;
     * ```
     */
    set columns(value: (string | ColumnData)[]);
    get columns(): ColumnData[];
    private get _headerRowData();
    private _textDelimiters;
    /**
     * Getter for the `value` property.
     * Returns the filtered data if a search string is provided, otherwise returns the original data.
     *
     * @example
     * ```typescript
     * const tableValue = table.value;
     * console.log(tableValue); // Output: The filtered or original data.
     * ```
     */
    get value(): TableGroupData[];
    private _expandedBeforeFilter?;
    private _queryString;
    /**
     * Sets the search string for filtering the table data.
     * This property allows you to filter the table data based on a search string.
     * If a search string is provided, the table will only display rows that match the search criteria.
     * The search criteria can be a simple string or a complex query.
     * If a simple string is provided, the table will filter rows based on the string's presence in any column.
     * If a complex query is provided, the table will filter rows based on the query's conditions and values.
     *
     * @example Simple Query
     * ```typescript
     * table.queryString = "example";
     * ```
     *
     * @example Complex Query
     * ```typescript
     * table.queryString = "column1="Jhon Doe" & column2=20";
     * ```
     */
    set queryString(_value: string | null);
    get queryString(): string | null;
    private _data;
    /**
     * Sets the data for the table.
     * This property allows you to define the data that will be displayed in the table.
     * The data is expected to be an array of `TableGroupData` objects.
     * If the columns are not explicitly set, they will be computed from the `data` object.
     *
     * @param value - An array of `TableGroupData` objects representing the table data.
     *
     * @example
     * ```typescript
     * const data: TableGroupData[] = [
     *   { data: { "Column 1": "Value 1", "Column 2": "Value 2" } },
     *   { data: { "Column 1": "Value 3", "Column 2": "Value 4" } },
     * ];
     * table.data = data;
     * ```
     */
    set data(value: TableGroupData[]);
    get data(): TableGroupData[];
    get dataAsync(): Promise<unknown>;
    /**
     * A boolean property that determines whether the table is expanded or not.
     * When `true`, the table will be expanded to show all rows.
     * When `false`, the table will be collapsed to show only the top-level rows.
     *
     * @defaultValue false
     *
     * @example
     * ```typescript
     * table.expanded = true;
     * ```
     * @example
     * ```html
     * <bim-table expanded></bim-table>
     * ```
     */
    expanded: boolean;
    /**
     * A boolean property that determines whether the table preserves its structure when filtering.
     * When `true`, the table will preserve its structure, showing only the filtered rows and their parents.
     * When `false`, the table will not preserve its structure, showing only the filtered rows.
     *
     * @defaultValue false
     *
     * @example
     * ```typescript
     * table.preserveStructureOnFilter = true;
     * ```
     */
    preserveStructureOnFilter: boolean;
    /**
     * A boolean property that determines whether the table indentation should be included in the exported text.
     *
     * @defaultValue false
     *
     * @example
     * ```typescript
     * table.indentationInText = true;
     * ```
     */
    indentationInText: boolean;
    /**
     * A property representing the rules for transforming table data.
     * The keys of the object are the column names, and the values are functions that define the transformation logic.
     *
     * @defaultValue An empty object.
     */
    dataTransform: TableDataTransform;
    selectableRows: boolean;
    selection: Set<TableRowData>;
    noIndentation: boolean;
    loading: boolean;
    private _errorLoading;
    private _onColumnsHidden;
    private _hiddenColumns;
    loadingErrorElement: HTMLElement | null;
    set hiddenColumns(value: string[]);
    get hiddenColumns(): string[];
    private updateFilteredData;
    private computeMissingColumns;
    private generateText;
    /**
     * A getter function that generates a CSV (Comma Separated Values) representation of the table data.
     *
     * @returns A string containing the CSV representation of the table data.
     *
     * @example
     * ```typescript
     * const csvData = table.csv;
     * console.log(csvData); // Output: "Column 1,Column 2\nValue 1,Value 2\nValue 3,Value 4"
     * ```
     */
    get csv(): string;
    /**
     * A getter function that generates a Tab Separated Values (TSV) representation of the table data.
     *
     * @returns A string containing the TSV representation of the table data.
     *
     * @example
     * ```typescript
     * const tsvData = table.tsv;
     * console.log(tsvData); // Output: "Column 1\tColumn 2\nValue 1\tValue 2\nValue 3\tValue 4"
     * ```
     */
    get tsv(): string;
    applyDataTransform(data: TableRowData): TableRowTemplate;
    /**
     * The `downloadData` method is used to download the table data in different formats.
     *
     * @param fileName - The name of the downloaded file. Default is "BIM Table Data".
     * @param format - The format of the downloaded file. Can be "json", "tsv", or "csv". Default is "json".
     *
     * @returns - This method does not return any value.
     *
     * @example
     * ```typescript
     * table.downloadData("MyTableData", "tsv");
     * ```
     */
    downloadData(fileName?: string, format?: "json" | "tsv" | "csv"): void;
    getRowIndentation(target: TableRowData, tableGroups?: TableGroupData[], level?: number): number | null;
    getGroupIndentation(target: TableGroupData, tableGroups?: TableGroupData[], level?: number): number | null;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * The function to be executed when loading async data using Table.loadData
     */
    loadFunction?: () => Promise<TableGroupData[]>;
    /**
     * Asynchronously loads data into the table based on Table.loadFunction.
     * If the data is already available, just set it in Table.data.
     *
     * @param force - A boolean indicating whether to force loading even if the table already has data.
     *
     * @returns - A promise that resolves to a boolean indicating whether the data loading was successful.
     * If the promise resolves to `true`, the data loading was successful.
     * If the promise resolves to `false`, the data loading was not successful.
     *
     * @remarks - If the table already has data and `force` is `false`, the function resolves to `false` without making any changes.
     * If the table already has data and `force` is `true`, the existing data is discarded before loading the new data.
     * If an error occurs during data loading, the function sets the `errorLoadingMessage` property with the error message and resolves to `false`.
     */
    loadData(force?: boolean): Promise<boolean>;
    /**
     * A function type representing the filter function for the table.
     * This function is used to determine whether a given row of data should be included in the filtered results.
     *
     * @param queryString - The search string used to filter the data.
     * @param data - The data row to be filtered.
     *
     * @returns A boolean value indicating whether the data row should be included in the filtered results.
     * If the function returns `true`, the data row will be included in the filtered results.
     * If the function returns `false`, the data row will be excluded from the filtered results.
     */
    filterFunction?: (queryString: string, data: TableGroupData) => boolean;
    private _stringFilterFunction;
    private _queryFilterFunction;
    private filter;
    private get _missingDataElement();
    protected render(): import("lit-html").TemplateResult<1>;
}
export * from "./src";
