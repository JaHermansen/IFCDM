import { Component } from "../../core/Component";
import { HasName, HasValue } from "../../core/types";
/**
 * A custom dropdown web component for BIM applications.
 */
export declare class Dropdown extends Component implements HasValue, HasName {
    /**
     * CSS styles for the component.
     */
    static styles: import("lit").CSSResult[];
    /**
     * The name of the dropdown.
     * @type {string}
     * @default undefined
     * @example
     * <bim-dropdown name="exampleName"></bim-dropdown>
     * @example
     * const dropdown = document.createElement('bim-dropdown');
     * dropdown.name = 'exampleName';
     */
    name?: string;
    /**
     * The icon to be displayed in the dropdown.
     * @type {string}
     * @default undefined
     * @example
     * <bim-dropdown icon="exampleIcon"></bim-dropdown>
     * @example
     * const dropdown = document.createElement('bim-dropdown');
     * dropdown.icon = 'exampleIcon';
     */
    icon?: string;
    /**
     * The label to be displayed in the dropdown.
     * @type {string}
     * @default undefined
     * @example
     * <bim-dropdown label="Example Label"></bim-dropdown>
     * @example
     * const dropdown = document.createElement('bim-dropdown');
     * dropdown.label = 'Example Label';
     */
    label?: string;
    /**
     * Indicates whether multiple options can be selected in the dropdown.
     * @default false
     * @example
     * <bim-dropdown multiple></bim-dropdown>
     * @example
     * const dropdown = document.createElement('bim-dropdown');
     * dropdown.multiple = true;
     */
    multiple: boolean;
    /**
     * Indicates whether a selection is required in the dropdown.
     * @default false
     * @example
     * <bim-dropdown required></bim-dropdown>
     * @example
     * const dropdown = document.createElement('bim-dropdown');
     * dropdown.required = true;
     */
    required: boolean;
    /**
     * Indicates whether the dropdown should be displayed vertically.
     * @default false
     * @example
     * <bim-dropdown vertical></bim-dropdown>
     * @example
     * const dropdown = document.createElement('bim-dropdown');
     * dropdown.vertical = true;
     */
    vertical: boolean;
    private _visible;
    /**
     * Indicates whether the dropdown it-self (not the component) is visible.
     * @type {boolean}
     * @default false
     * @example
     * <bim-dropdown visible></bim-dropdown>
     * @example
     * const dropdown = document.createElement('bim-dropdown');
     * dropdown.visible = true;
     */
    set visible(value: boolean);
    get visible(): boolean;
    private _value;
    /**
     * The selected values in the dropdown.
     * @type {any[]}
     * @example
     * const dropdown = document.createElement('bim-dropdown');
     * dropdown.value = ['option1', 'option2'];
     */
    set value(value: any[]);
    get value(): any[];
    private get _options();
    /**
     * Event that is fired when the value of the dropdown changes.
     * This event is fired when the user selects or deselects an option.
     *
     * @event change
     * @example
     * dropdown.addEventListener('change', (event) => {
     *   console.log('Dropdown value changed:', event.target.value);
     * });
     */
    onValueChange: Event;
    private _contextMenu;
    constructor();
    private onOptionClick;
    private onSlotChange;
    private updateOptionsState;
    private findOption;
    protected render(): import("lit-html").TemplateResult<1>;
}
