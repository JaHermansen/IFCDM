import { Query, QueryCondition } from "./types";
/**
 * Extracts and returns the value of an HTML element's attributes.
 * @param child - The HTML element to extract values from.
 * @param recursive - Whether to recursively extract values from child elements. Default is true.
 * @returns An object containing the extracted values.
 */
export declare const getElementValue: (child: HTMLElement, transform?: Record<string, (value: any) => any>, recursive?: boolean) => Record<string, any>;
/**
 * Converts a string to a boolean, number, or string based on its value.
 * @param value - The string to convert.
 * @returns The converted value.
 */
export declare const convertString: (value: string) => string | number | boolean;
/**
 * Parses a query string and returns a Query object.
 * @param queryString - The query string to parse.
 * @returns The parsed Query object or null if parsing fails.
 */
export declare const getQuery: (queryString: string) => Query | null;
/**
 * Evaluates a condition and returns the result.
 * @param left - The left operand.
 * @param condition - The condition to evaluate.
 * @param right - The right operand.
 * @returns The result of the evaluation.
 */
export declare const evalCondition: (left: string | boolean | number, condition: QueryCondition, right: string | boolean | number) => boolean;
