/**
 * Represents an object that has a value and an event for value changes.
 */
export interface HasValue {
    value: any;
    onValueChange: Event;
}
/**
 * Represents an object that has a name and an optional label.
 */
export interface HasName {
    name?: string;
    label?: string;
}
/**
 * Represents a condition used in query building.
 */
export type QueryCondition = "=" | ">" | ">=" | "<" | "<=" | "?" | "/" | "#";
/**
 * Represents an operator used in query building.
 */
export type QueryOperators = "&" | "|";
/**
 * Represents a single query condition.
 */
export interface EntryQuery {
    operator?: QueryOperators;
    key: string;
    condition: QueryCondition;
    value: string | number | boolean;
}
/**
 * Represents a group of queries with an operator.
 */
export interface QueryGroup {
    operator?: QueryOperators;
    queries: (EntryQuery | QueryGroup)[];
}
/**
 * Represents a query, which can be a single query or a group of queries.
 */
export type Query = (EntryQuery | QueryGroup)[];
/**
 * Represents a map of condition functions, where the key is a QueryCondition and the value is a function that evaluates the condition.
 */
export type ConditionFunctions = {
    [queryCondition in QueryCondition]: (leftValue: string | boolean | number, rightValue: string | boolean | number) => boolean;
};
