import { LitElement, TemplateResult } from "lit";
export type StatelessComponent = () => TemplateResult;
export type StatefullComponent<S extends Record<string, any>> = (state: S) => TemplateResult;
type UpdateFunction<S extends Record<string, any>> = (state?: Partial<S>) => S;
/**
 * Heloooooooooo
 */
export declare class Component extends LitElement {
    private _lazyLoadObserver;
    private _visibleElements;
    protected ELEMENTS_BEFORE_OBSERVER: number;
    protected useObserver: boolean;
    protected elements: Set<HTMLElement>;
    protected set visibleElements(value: HTMLElement[]);
    protected get visibleElements(): HTMLElement[];
    private getLazyObserver;
    private observeLastElement;
    protected resetVisibleElements(): void;
    protected observe: (elements: HTMLElement[]) => void;
    /**
     * Creates a new UI component instance based on the provided template and initial state.
     *
     * @template T - The type of the UI component element.
     * @template S - The type of the component state.
     *
     * @param template - The stateful component template function.
     * @param state - The initial state of the component.
     * @returns An array containing the created UI component element and a function to update its state.
     */
    static create<T extends HTMLElement, S extends Record<string, any>>(template: StatefullComponent<S>, state: S): [element: T, update: UpdateFunction<S>];
    /**
     * Creates a new UI component instance based on the provided template and initial state.
     *
     * @template T - The type of the UI component element.
     * @template S - The type of the component state.
     *
     * @param template - The stateless component template function.
     * @returns The created UI component element.
     */
    static create<T extends HTMLElement>(template: StatelessComponent): T;
}
export {};
