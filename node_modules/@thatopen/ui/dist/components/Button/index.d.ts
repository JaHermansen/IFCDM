import { LitElement } from "lit";
import "iconify-icon";
/**
 * A custom button web component for BIM applications. HTML tag: bim-button
 *
 * @fires click - Fired when the button is clicked.
 */
export declare class Button extends LitElement {
    /**
     * CSS styles for the component.
     */
    static styles: import("lit").CSSResult;
    /**
     * The label to be displayed on the button.
     * @type {string}
     * @default undefined
     * @example <bim-button label="Click me"></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     */
    label?: string;
    /**
     * A boolean attribute which, if present, indicates that the label should be hidden.
     * @default false
     * @example <bim-button label="Click me" label-hidden></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     *          button.labelHidden = true;
     */
    labelHidden: boolean;
    /**
     * A boolean attribute which, if present, indicates that the button is active.
     * @default false
     * @example <bim-button label="Click me" active></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     *          button.active = true;
     */
    active: boolean;
    /**
     * A boolean attribute which, if present, indicates that the button is disabled.
     * @default false
     * @example <bim-button label="Click me" disabled></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     *          button.disabled = true;
     */
    disabled: boolean;
    /**
     * The icon to be displayed on the button.
     * @type {string}
     * @default undefined
     * @example <bim-button icon="my-icon"></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.icon = 'my-icon';
     */
    icon?: string;
    /**
     * A boolean attribute which, if present, indicates that the button should be displayed vertically.
     * @default false
     * @example <bim-button label="Click me" vertical></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     *          button.vertical = true;
     */
    vertical: boolean;
    /**
     * The time (in milliseconds) to wait before showing the tooltip when hovering over the button.
     * @type {number}
     * @default 700
     * @example <bim-button label="Click me" tooltip-time="1000"></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     *          button.tooltipTime = 1000;
     */
    tooltipTime?: number;
    /**
     * A boolean attribute which, if present, indicates that the tooltip should be visible.
     * @default false
     * @example <bim-button label="Click me" tooltip-visible></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     *          button.tooltipVisible = true;
     */
    tooltipVisible: boolean;
    /**
     * The title of the tooltip to be displayed when hovering over the button.
     * @type {string}
     * @default undefined
     * @example <bim-button label="Click me" tooltip-title="Button Tooltip"></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     *          button.tooltipTitle = 'Button Tooltip';
     */
    tooltipTitle?: string;
    /**
     * The text of the tooltip to be displayed when hovering over the button.
     * @type {string}
     * @default undefined
     * @example <bim-button label="Click me" tooltip-text="This is a tooltip"></bim-button>
     * @example const button = document.createElement('bim-button');
     *          button.label = 'Click me';
     *          button.tooltipText = 'This is a tooltip';
     */
    tooltipText?: string;
    private _stateBeforeLoading;
    private _loading;
    /**
     * Attribute to set the loading state of the button.
     * When the loading state is set to true, the button is disabled and the icon is changed to a loading spinner.
     * When the loading state is set to false, the button is reverted to its previous state.
     */
    set loading(value: boolean);
    get loading(): boolean;
    private _parent;
    private _tooltip;
    private timeoutID?;
    private _mouseLeave;
    private set mouseLeave(value);
    private get mouseLeave();
    constructor();
    private computeTooltipPosition;
    private onMouseEnter;
    private onClick;
    closeNestedContexts(): void;
    click(): void;
    private get _contextMenu();
    private showContextMenu;
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected render(): import("lit-html").TemplateResult<1>;
}
