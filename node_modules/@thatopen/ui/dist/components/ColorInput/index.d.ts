import { LitElement } from "lit";
import { HasName, HasValue } from "../../core/types";
/**
 * A custom color input web component for BIM applications. HTML tag: bim-color-input
 *
 * @fires input - Fired when the color input changes.
 */
export declare class ColorInput extends LitElement implements HasValue, HasName {
    /**
   * CSS styles for the component.
   */
    static styles: import("lit").CSSResult;
    /**
     * The name of the color input.
     * @type {string}
     * @default undefined
     * @example
     * <bim-color-input name="colorInput"></bim-color-input>
     * @example
     * const colorInput = document.createElement('bim-color-input');
     * colorInput.name = 'colorInput';
     */
    name?: string;
    /**
     * The label for the color input.
     * @type {string}
     * @default undefined
     * @example
     * <bim-color-input label="Select a color"></bim-color-input>
     * @example
     * const colorInput = document.createElement('bim-color-input');
     * colorInput.label = 'Select a color';
     */
    label?: string;
    /**
     * The icon for the color input.
     * @type {string}
     * @default undefined
     * @example
     * <bim-color-input icon="palette"></bim-color-input>
     * @example
     * const colorInput = document.createElement('bim-color-input');
     * colorInput.icon = 'palette';
     */
    icon?: string;
    /**
     * A boolean attribute which, if present, indicates that the color input should be displayed vertically.
     * @default false
     * @example
     * <bim-color-input vertical></bim-color-input>
     * @example
     * const colorInput = document.createElement('bim-color-input');
     * colorInput.vertical = true;
     */
    vertical: boolean;
    /**
     * The opacity of the color input.
     * @type {number}
     * @default undefined
     * @example
     * <bim-color-input opacity="0.5"></bim-color-input>
     * @example
     * const colorInput = document.createElement('bim-color-input');
     * colorInput.opacity = 0.5;
     */
    opacity?: number;
    /**
     * The color value of the color input in hexadecimal format.
     * @default #bcf124
     * @example
     * <bim-color-input color="#ff0000"></bim-color-input>
     * @example
     * const colorInput = document.createElement('bim-color-input');
     * colorInput.color = '#ff0000';
     */
    color: string;
    private _colorInput;
    private _textInput;
    onValueChange: Event;
    /**
     * Represents both the color and opacity values combined into a single object. This is an instance property, not an HTMLElement attribute.
     * @type {Object}
     * @example
     * const colorInput = document.createElement('bim-color-input');
     * colorInput.value = { color: '#ff0000', opacity: 0.5 };
     */
    set value(_value: {
        color: string;
        opacity?: number;
    });
    get value(): {
        color: string;
        opacity?: number;
    };
    private onColorInput;
    private onTextInput;
    private onOpacityInput;
    /**
     * Focuses on the color input by programmatically triggering a click event on the underlying color input element.
     * If the color input element is not available, the function does nothing.
     */
    focus(): void;
    protected render(): import("lit-html").TemplateResult<1>;
}
