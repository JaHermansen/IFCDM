import { LitElement } from "lit";
import { HasName, HasValue } from "../../core/types";
/**
 * A custom text input web component for BIM applications. HTML tag: bim-text-input
 */
export declare class TextInput extends LitElement implements HasName, HasValue {
    /**
     * CSS styles for the component.
     */
    static styles: import("lit").CSSResult[];
    private _debounceTimeoutID?;
    private _inputTypes;
    /**
     * Represents the icon property of the TextInput component.
     * This property is used to display an icon next to the input field.
     *
     * @example
     * <bim-text-input icon="material-symbols:search"></bim-text-input>
     */
    icon?: string;
    /**
     * Represents the label property of the TextInput component.
     * This property is used to display a label above or next to the input field.
     *
     * @example
     * <bim-text-input label="Name"></bim-text-input>
     */
    label?: string;
    /**
     * Represents the name property of the TextInput component.
     * This property is used to uniquely identify the input field within a form or group of inputs.
     *
     * @example
     * <bim-text-input name="username"></bim-text-input>
     */
    name?: string;
    /**
     * Represents the placeholder property of the TextInput component.
     * This property is used to display a hint or a placeholder text inside the input field.
     * The placeholder text is displayed when the input field is empty and loses focus.
     *
     * @example
     * <bim-text-input placeholder="Enter your name.."></bim-text-input>
     */
    placeholder?: string;
    /**
     * Represents the value property of the TextInput component.
     * This property is used to get or set the current value of the input field.
     *
     * @example
     * // Get the current value
     * const currentValue = textInput.value;
     *
     * // Set a new value
     * textInput.value = "New Value";
     */
    value: string;
    /**
     * Represents the vertical property of the TextInput component.
     * This property is used to control the layout of the input field.
     * When set to `true`, the input field will be displayed vertically.
     *
     * @default false
     *
     * @example
     * <bim-text-input vertical></bim-text-input>
     */
    vertical: boolean;
    /**
     * Represents the debounce property of the TextInput component.
     * This property is used to control the delay in milliseconds before the `input` event is fired.
     * The `input` event is debounced to prevent excessive event firing when the user types rapidly.
     *
     * @default undefined
     *
     * @example
     * <bim-text-input debounce="500"></bim-text-input>
     */
    debounce?: number;
    rows?: number;
    private _type;
    /**
     * Sets the type of the input field.
     * The type property determines the behavior of the input field.
     * It can be any of the following: "date", "datetime-local", "email", "month", "password", "search", "tel", "text", "time", "url", "week".
     * If an invalid type is provided, the type will not be changed.
     *
     * @example
     * // Set the type to "email"
     * textInput.type = "email";
     */
    set type(value: string);
    get type(): string;
    /**
     * Gets the query value derived from the current input value.
     * The `getQuery` function is assumed to be a utility function that takes a string as input
     * and returns a processed query value based on the input.
     *
     * @returns The processed query value derived from the current input value.
     *
     * @example
     * ```typescript
     * const textInput = new TextInput();
     * textInput.value = "Key?Value";
     * console.log(textInput.query);
     * ```
     */
    get query(): import("../../core/types").Query | null;
    onValueChange: Event;
    private onInputChange;
    focus(): void;
    protected render(): import("lit-html").TemplateResult<1>;
}
