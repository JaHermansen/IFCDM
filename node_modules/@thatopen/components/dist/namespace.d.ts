declare namespace OBC {
import * as THREE from "three";
import { Components } from "../Components";
import { Component } from "../Types";
/**
 * A tool to safely remove meshes, geometries, materials and other items from memory to [prevent memory leaks](https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects).
 */
export declare class Disposer extends Component {
    private _disposedComponents;
    /** {@link Component.enabled} */
    enabled: boolean;
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "76e9cd8e-ad8f-4753-9ef6-cbc60f7247fe";
    constructor(components: Components);
    /**
     * Return the UUIDs of all disposed components.
     */
    get(): Set<string>;
    /**
     * Removes a mesh, its geometry and its materials from memory. If you are
     * using any of these in other parts of the application, make sure that you
     * remove them from the mesh before disposing it.
     *
     * @param object - the [object](https://threejs.org/docs/#api/en/core/Object3D)
     * to remove.
     *
     * @param materials - whether to dispose the materials of the mesh.
     *
     * @param recursive - whether to recursively dispose the children of the mesh.
     */
    destroy(object: THREE.Object3D, materials?: boolean, recursive?: boolean): void;
    /**
     * Disposes a geometry from memory.
     *
     * @param geometry - the
     * [geometry](https://threejs.org/docs/#api/en/core/BufferGeometry)
     * to remove.
     */
    disposeGeometry(geometry: THREE.BufferGeometry): void;
    private disposeGeometryAndMaterials;
    private disposeChildren;
    private static disposeMaterial;
}
import { Component, Disposable, Event } from "../Types";
/**
 * The entry point of the Components library. It can create, delete and access all the components of the library globally, update all the updatable components automatically and dispose all the components, preventing memory leaks.
 */
export declare class Components implements Disposable {
    /**
     * The version of the @thatopen/components library.
     */
    static readonly release = "2.0.20";
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<void>;
    /**
     * The list of components created in this app.
     * The keys are UUIDs and the values are instances of the components.
     */
    readonly list: Map<string, Component>;
    /**
     * If disabled, the animation loop will be stopped.
     * Default value is false.
     */
    enabled: boolean;
    private _clock;
    /**
     * Adds a component to the list of components.
     * Throws an error if a component with the same UUID already exists.
     *
     * @param uuid - The unique identifier of the component.
     * @param instance - The instance of the component to be added.
     *
     * @throws Will throw an error if a component with the same UUID already exists.
     *
     * @internal
     */
    add(uuid: string, instance: Component): void;
    /**
     * Retrieves a component instance by its constructor function.
     * If the component does not exist in the list, it will be created and added.
     *
     * @template U - The type of the component to retrieve.
     * @param Component - The constructor function of the component to retrieve.
     *
     * @returns The instance of the requested component.
     *
     * @throws Will throw an error if a component with the same UUID already exists.
     *
     * @internal
     */
    get<U extends Component>(Component: new (components: Components) => U): U;
    constructor();
    /**
     * Initializes the Components instance.
     * This method starts the animation loop, sets the enabled flag to true,
     * and calls the update method.
     *
     * @returns {void}
     */
    init(): void;
    /**
     * Disposes the memory of all the components and tools of this instance of
     * the library. A memory leak will be created if:
     *
     * - An instance of the library ends up out of scope and this function isn't
     * called. This is especially relevant in Single Page Applications (React,
     * Angular, Vue, etc).
     *
     * - Any of the objects of this instance (meshes, geometries,materials, etc) is
     * referenced by a reference type (object or array).
     *
     * You can learn more about how Three.js handles memory leaks
     * [here](https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects).
     *
     */
    dispose(): void;
    private update;
    private static setupBVH;
}
import { Component, Disposable, World, Event } from "../Types";
import { SimpleRaycaster } from "./src";
import { Components } from "../Components";
/**
 * A component that manages a raycaster for each world and automatically disposes it when its corresponding world is disposed. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/Raycasters). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/Raycasters).
 */
export declare class Raycasters extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "d5d8bdf0-db25-4952-b951-b643af207ace";
    /** {@link Component.enabled} */
    enabled: boolean;
    /**
     * A Map that stores raycasters for each world.
     * The key is the world's UUID, and the value is the corresponding SimpleRaycaster instance.
     */
    list: Map<string, SimpleRaycaster>;
    /** {@link Disposable.onDisposed} */
    onDisposed: Event<unknown>;
    constructor(components: Components);
    /**
     * Retrieves a SimpleRaycaster instance for the given world.
     * If a SimpleRaycaster instance already exists for the world, it will be returned.
     * Otherwise, a new SimpleRaycaster instance will be created and added to the list.
     *
     * @param world - The world for which to retrieve or create a SimpleRaycaster instance.
     * @returns The SimpleRaycaster instance for the given world.
     */
    get(world: World): SimpleRaycaster;
    /**
     * Deletes the SimpleRaycaster instance associated with the given world.
     * If a SimpleRaycaster instance exists for the given world, it will be disposed and removed from the list.
     *
     * @param world - The world for which to delete the SimpleRaycaster instance.
     * @returns {void}
     */
    delete(world: World): void;
    /** {@link Disposable.dispose} */
    dispose(): void;
}
import { Component, Disposable, Updateable, World, Event, BaseScene, BaseCamera, BaseRenderer } from "../Types";
import { Components } from "../Components";
import { SimpleWorld } from "./src";
/**
 * A class representing a collection of worlds within a game engine. It manages the creation, deletion, and update of worlds. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/Worlds). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/Worlds).
 */
export declare class Worlds extends Component implements Updateable, Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "fdb61dc4-2ec1-4966-b83d-54ea795fad4a";
    /** {@link Updateable.onAfterUpdate} */
    readonly onAfterUpdate: Event<unknown>;
    /** {@link Updateable.onBeforeUpdate} */
    readonly onBeforeUpdate: Event<unknown>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /**
     * An event that is triggered when a new world is created.
     * The event passes the newly created world as a parameter.
     */
    readonly onWorldCreated: Event<World>;
    /**
     * An event that is triggered when a world is deleted.
     * The event passes the UUID of the deleted world as a parameter.
     */
    readonly onWorldDeleted: Event<string>;
    /**
     * A collection of worlds managed by this component.
     * The key is the unique identifier (UUID) of the world, and the value is the World instance.
     */
    list: Map<string, World>;
    /** {@link Component.enabled} */
    enabled: boolean;
    constructor(components: Components);
    /**
     * Creates a new instance of a SimpleWorld and adds it to the list of worlds.
     *
     * @template T - The type of the scene, extending from BaseScene. Defaults to BaseScene.
     * @template U - The type of the camera, extending from BaseCamera. Defaults to BaseCamera.
     * @template S - The type of the renderer, extending from BaseRenderer. Defaults to BaseRenderer.
     *
     * @throws {Error} - Throws an error if a world with the same UUID already exists in the list.
     */
    create<T extends BaseScene = BaseScene, U extends BaseCamera = BaseCamera, S extends BaseRenderer = BaseRenderer>(): SimpleWorld<T, U, S>;
    /**
     * Deletes a world from the list of worlds.
     *
     * @param {World} world - The world to be deleted.
     *
     * @throws {Error} - Throws an error if the provided world is not found in the list.
     *
     * @returns {void}
     */
    delete(world: World): void;
    /**
     * Disposes of the Worlds component and all its managed worlds.
     * This method sets the enabled flag to false, disposes of all worlds, clears the list,
     * and triggers the onDisposed event.
     *
     * @returns {void}
     */
    dispose(): void;
    /** {@link Updateable.update} */
    update(delta?: number): void | Promise<void>;
}
import { Component, Disposable, World, Event } from "../Types";
import { GridConfig, SimpleGrid } from "./src";
import { Components } from "../Components";
/**
 * A component that manages grid instances. Each grid is associated with a unique world. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/Grids). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/Grids).
 */
export declare class Grids extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "d1e814d5-b81c-4452-87a2-f039375e0489";
    /**
     * A map of world UUIDs to their corresponding grid instances.
     */
    list: Map<string, SimpleGrid>;
    /**
     * The default configuration for grid creation.
     */
    config: Required<GridConfig>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /** {@link Component.enabled} */
    enabled: boolean;
    constructor(components: Components);
    /**
     * Creates a new grid for the given world.
     * Throws an error if a grid already exists for the world.
     *
     * @param world - The world to create the grid for.
     * @returns The newly created grid.
     *
     * @throws Will throw an error if a grid already exists for the given world.
     */
    create(world: World): SimpleGrid;
    /**
     * Deletes the grid associated with the given world.
     * If a grid does not exist for the given world, this method does nothing.
     *
     * @param world - The world for which to delete the grid.
     *
     * @remarks
     * This method will dispose of the grid and remove it from the internal list.
     * If the world is disposed before calling this method, the grid will be automatically deleted.
     */
    delete(world: World): void;
    /** {@link Disposable.dispose} */
    dispose(): void;
}
import * as THREE from "three";
import { Component, Createable, Disposable, Event, Hideable, World } from "../Types";
import { SimplePlane } from "./src";
import { Components } from "../Components";
/**
 * A lightweight component to easily create, delete and handle [clipping planes](https://threejs.org/docs/#api/en/materials/Material.clippingPlanes). ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/Clipper). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/Clipper).
 *
 * @param components - the instance of {@link Components} used.
 * E.g. {@link SimplePlane}.
 */
export declare class Clipper extends Component implements Createable, Disposable, Hideable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "66290bc5-18c4-4cd1-9379-2e17a0617611";
    /** Event that fires when the user starts dragging a clipping plane. */
    readonly onBeforeDrag: Event<void>;
    /** Event that fires when the user stops dragging a clipping plane. */
    readonly onAfterDrag: Event<void>;
    /**
     * Event that fires when the user starts creating a clipping plane.
     */
    readonly onBeforeCreate: Event<unknown>;
    /**
     * Event that fires when the user cancels the creation of a clipping plane.
     */
    readonly onBeforeCancel: Event<unknown>;
    /**
     * Event that fires after the user cancels the creation of a clipping plane.
     */
    readonly onAfterCancel: Event<unknown>;
    /**
     * Event that fires when the user starts deleting a clipping plane.
     */
    readonly onBeforeDelete: Event<unknown>;
    /**
     * Event that fires after a clipping plane has been created.
     * @param plane - The newly created clipping plane.
     */
    readonly onAfterCreate: Event<SimplePlane>;
    /**
     * Event that fires after a clipping plane has been deleted.
     * @param plane - The deleted clipping plane.
     */
    readonly onAfterDelete: Event<SimplePlane>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<string>;
    /**
     * Whether to force the clipping plane to be orthogonal in the Y direction
     * (up). This is desirable when clipping a building horizontally and a
     * clipping plane is created in its roof, which might have a slight
     * slope for draining purposes.
     */
    orthogonalY: boolean;
    /**
     * The tolerance that determines whether an almost-horizontal clipping plane
     * will be forced to be orthogonal to the Y direction. {@link orthogonalY}
     * has to be 'true' for this to apply.
     */
    toleranceOrthogonalY: number;
    /**
     * The type of clipping plane to be created.
     * Default is {@link SimplePlane}.
     */
    Type: new (...args: any) => SimplePlane;
    /**
     * A list of all the clipping planes created by this component.
     */
    list: SimplePlane[];
    /** The material used in all the clipping planes. */
    private _material;
    private _size;
    private _enabled;
    private _visible;
    /** {@link Component.enabled} */
    get enabled(): boolean;
    /** {@link Component.enabled} */
    set enabled(state: boolean);
    /** {@link Hideable.visible } */
    get visible(): boolean;
    /** {@link Hideable.visible } */
    set visible(state: boolean);
    /** The material of the clipping plane representation. */
    get material(): THREE.MeshBasicMaterial;
    /** The material of the clipping plane representation. */
    set material(material: THREE.MeshBasicMaterial);
    /** The size of the geometric representation of the clippings planes. */
    get size(): number;
    /** The size of the geometric representation of the clippings planes. */
    set size(size: number);
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /** {@link Createable.create} */
    create(world: World): void;
    /**
     * Creates a plane in a certain place and with a certain orientation,
     * without the need of the mouse.
     *
     * @param world - the world where this plane should be created.
     * @param normal - the orientation of the clipping plane.
     * @param point - the position of the clipping plane.
     * navigation.
     */
    createFromNormalAndCoplanarPoint(world: World, normal: THREE.Vector3, point: THREE.Vector3): SimplePlane;
    /**
     * {@link Createable.delete}
     *
     * @param world - the world where the plane to delete is.
     * @param plane - the plane to delete. If undefined, the first plane
     * found under the cursor will be deleted.
     */
    delete(world: World, plane?: SimplePlane): void;
    /** Deletes all the existing clipping planes. */
    deleteAll(): void;
    private deletePlane;
    private pickPlane;
    private getAllPlaneMeshes;
    private createPlaneFromIntersection;
    private getWorldNormal;
    private normalizePlaneDirectionY;
    private newPlane;
    private updateMaterialsAndPlanes;
    private _onStartDragging;
    private _onEndDragging;
}
import { Components } from "../Components";
import { MeshCullerRenderer, CullerRendererSettings } from "./src";
import { Component, Event, Disposable, World } from "../Types";
/**
 * A component that provides culling functionality for meshes in a 3D scene. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/Cullers). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/Cullers).
 */
export declare class Cullers extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "69f2a50d-c266-44fc-b1bd-fa4d34be89e6";
    /**
     * An event that is triggered when the Cullers component is disposed.
     */
    readonly onDisposed: Event<unknown>;
    private _enabled;
    /**
     * A map of MeshCullerRenderer instances, keyed by their world UUIDs.
     */
    list: Map<string, MeshCullerRenderer>;
    /** {@link Component.enabled} */
    get enabled(): boolean;
    /** {@link Component.enabled} */
    set enabled(value: boolean);
    constructor(components: Components);
    /**
     * Creates a new MeshCullerRenderer for the given world.
     * If a MeshCullerRenderer already exists for the world, it will return the existing one.
     *
     * @param world - The world for which to create the MeshCullerRenderer.
     * @param config - Optional configuration settings for the MeshCullerRenderer.
     *
     * @returns The newly created or existing MeshCullerRenderer for the given world.
     */
    create(world: World, config?: Partial<CullerRendererSettings>): MeshCullerRenderer;
    /**
     * Deletes the MeshCullerRenderer associated with the given world.
     * If a MeshCullerRenderer exists for the given world, it will be disposed and removed from the list.
     *
     * @param world - The world for which to delete the MeshCullerRenderer.
     *
     * @returns {void}
     */
    delete(world: World): void;
    /** {@link Disposable.dispose} */
    dispose(): void;
}
import { MiniMap } from "./src";
import { Component, Updateable, World, Event, Disposable } from "../Types";
import { Components } from "../Components";
/**
 * A component that manages multiple {@link MiniMap} instances, each associated with a unique world ID. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/MiniMap). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/MiniMaps).
 */
export declare class MiniMaps extends Component implements Updateable, Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "39ad6aad-84c8-4adf-a1e0-7f25313a9e7f";
    /** {@link Updateable.onAfterUpdate} */
    readonly onAfterUpdate: Event<unknown>;
    /** {@link Updateable.onBeforeUpdate} */
    readonly onBeforeUpdate: Event<unknown>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /** {@link Component.enabled} */
    enabled: boolean;
    /**
     * A collection of {@link MiniMap} instances, each associated with a unique world ID.
     */
    list: Map<string, MiniMap>;
    constructor(components: Components);
    /**
     * Creates a new {@link MiniMap} instance associated with the given world.
     * If a {@link MiniMap} instance already exists for the given world, an error will be thrown.
     *
     * @param world - The {@link World} for which to create a {@link MiniMap} instance.
     * @returns The newly created {@link MiniMap} instance.
     * @throws Will throw an error if a {@link MiniMap} instance already exists for the given world.
     */
    create(world: World): MiniMap;
    /**
     * Deletes a {@link MiniMap} instance associated with the given world ID.
     * If a {@link MiniMap} instance does not exist for the given ID, nothing happens.
     *
     * @param id - The unique identifier of the world for which to delete the {@link MiniMap} instance.
     * @returns {void}
     */
    delete(id: string): void;
    /** {@link Disposable.dispose} */
    dispose(): void;
    /** {@link Updateable.update} */
    update(): void;
}
import * as THREE from "three";
import { Components } from "../Components";
import { SimpleCamera } from "..";
import { NavigationMode, NavModeID, ProjectionManager } from "./src";
/**
 * A flexible camera that uses [yomotsu's cameracontrols](https://github.com/yomotsu/camera-controls) to control the camera in 2D and 3D. It supports multiple navigation modes, such as 2D floor plan navigation, first person and 3D orbit. This class extends the SimpleCamera class and adds additional functionality for managing different camera projections and navigation modes. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/OrthoPerspectiveCamera). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/OrthoPerspectiveCamera).
 */
export declare class OrthoPerspectiveCamera extends SimpleCamera {
    /**
     * A ProjectionManager instance that manages the projection modes of the camera.
     */
    readonly projection: ProjectionManager;
    /**
     * A THREE.OrthographicCamera instance that represents the orthographic camera.
     * This camera is used when the projection mode is set to orthographic.
     */
    readonly threeOrtho: THREE.OrthographicCamera;
    /**
     * A THREE.PerspectiveCamera instance that represents the perspective camera.
     * This camera is used when the projection mode is set to perspective.
     */
    readonly threePersp: THREE.PerspectiveCamera;
    protected readonly _userInputButtons: any;
    protected readonly _frustumSize = 50;
    protected readonly _navigationModes: Map<NavModeID, NavigationMode>;
    protected _mode: NavigationMode | null;
    private previousSize;
    /**
     * Getter for the current navigation mode.
     * Throws an error if the mode is not found or the camera is not initialized.
     *
     * @returns {NavigationMode} The current navigation mode.
     *
     * @throws {Error} Throws an error if the mode is not found or the camera is not initialized.
     */
    get mode(): NavigationMode;
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Sets a new {@link NavigationMode} and disables the previous one.
     *
     * @param mode - The {@link NavigationMode} to set.
     */
    set(mode: NavModeID): void;
    /**
     * Make the camera view fit all the specified meshes.
     *
     * @param meshes the meshes to fit. If it is not defined, it will
     * evaluate {@link Components.meshes}.
     * @param offset the distance to the fit object
     */
    fit(meshes: Iterable<THREE.Mesh>, offset?: number): Promise<void>;
    /**
     * Allows or prevents all user input.
     *
     * @param active - whether to enable or disable user inputs.
     */
    setUserInput(active: boolean): void;
    private disableUserInput;
    private enableUserInput;
    private newOrthoCamera;
    private setOrthoPerspCameraAspect;
}
import * as THREE from "three";
import * as FRAGS from "@thatopen/fragments";
import { FragmentsGroup } from "@thatopen/fragments";
import { Component, Components, Disposable, Event } from "../../core";
/**
 * A simple implementation of bounding box that works for fragments. The resulting bbox is not 100% precise, but it's fast, and should suffice for general use cases such as camera zooming or general boundary determination. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/BoundingBoxer). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/BoundingBoxer).
 */
export declare class BoundingBoxer extends Component implements Disposable {
    static readonly uuid: "d1444724-dba6-4cdd-a0c7-68ee1450d166";
    /** {@link Component.enabled} */
    enabled: boolean;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    private _absoluteMin;
    private _absoluteMax;
    private _meshes;
    constructor(components: Components);
    /**
     * A static method to calculate the dimensions of a given bounding box.
     *
     * @param bbox - The bounding box to calculate the dimensions for.
     * @returns An object containing the width, height, depth, and center of the bounding box.
     */
    static getDimensions(bbox: THREE.Box3): {
        width: number;
        height: number;
        depth: number;
        center: THREE.Vector3;
    };
    /**
     * A static method to create a new bounding box boundary.
     *
     * @param positive - A boolean indicating whether to create a boundary for positive or negative values.
     * @returns A new THREE.Vector3 representing the boundary.
     *
     * @remarks
     * This method is used to create a new boundary for calculating bounding boxes.
     * It sets the x, y, and z components of the returned vector to positive or negative infinity,
     * depending on the value of the 'positive' parameter.
     *
     * @example
     * '''typescript
     * const positiveBound = BoundingBoxer.newBound(true);
     * console.log(positiveBound); // Output: Vector3 { x: Infinity, y: Infinity, z: Infinity }
     *
     * const negativeBound = BoundingBoxer.newBound(false);
     * console.log(negativeBound); // Output: Vector3 { x: -Infinity, y: -Infinity, z: -Infinity }
     * '''
     */
    static newBound(positive: boolean): THREE.Vector3;
    /**
     * A static method to calculate the bounding box of a set of points.
     *
     * @param points - An array of THREE.Vector3 representing the points.
     * @param min - An optional THREE.Vector3 representing the minimum bounds. If not provided, it will be calculated.
     * @param max - An optional THREE.Vector3 representing the maximum bounds. If not provided, it will be calculated.
     * @returns A THREE.Box3 representing the bounding box of the given points.
     *
     * @remarks
     * This method calculates the bounding box of a set of points by iterating through each point and updating the minimum and maximum bounds accordingly.
     * If the 'min' or 'max' parameters are provided, they will be used as the initial bounds. Otherwise, the initial bounds will be set to positive and negative infinity.
     *
     * @example
     * '''typescript
     * const points = [
     *   new THREE.Vector3(1, 2, 3),
     *   new THREE.Vector3(4, 5, 6),
     *   new THREE.Vector3(7, 8, 9),
     * ];
     *
     * const bbox = BoundingBoxer.getBounds(points);
     * console.log(bbox); // Output: Box3 { min: Vector3 { x: 1, y: 2, z: 3 }, max: Vector3 { x: 7, y: 8, z: 9 } }
     * '''
     */
    static getBounds(points: THREE.Vector3[], min?: THREE.Vector3, max?: THREE.Vector3): THREE.Box3;
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Returns the bounding box of the calculated fragments.
     *
     * @returns A new THREE.Box3 instance representing the bounding box.
     *
     * @remarks
     * This method clones the internal minimum and maximum vectors and returns a new THREE.Box3 instance.
     * The returned box represents the bounding box of the calculated fragments.
     *
     * @example
     * '''typescript
     * const boundingBox = boundingBoxer.get();
     * console.log(boundingBox); // Output: Box3 { min: Vector3 { x: -10, y: -10, z: -10 }, max: Vector3 { x: 10, y: 10, z: 10 } }
     * '''
     */
    get(): THREE.Box3;
    /**
     * Calculates and returns a sphere that encompasses the entire bounding box.
     *
     * @returns A new THREE.Sphere instance representing the calculated sphere.
     *
     * @remarks
     * This method calculates the center and radius of a sphere that encompasses the entire bounding box.
     * The center is calculated as the midpoint between the minimum and maximum bounds of the bounding box.
     * The radius is calculated as the distance from the center to the minimum bound.
     *
     * @example
     * '''typescript
     * const boundingBoxer = components.get(BoundingBoxer);
     * boundingBoxer.add(fragmentsGroup);
     * const boundingSphere = boundingBoxer.getSphere();
     * console.log(boundingSphere); // Output: Sphere { center: Vector3 { x: 0, y: 0, z: 0 }, radius: 10 }
     * '''
     */
    getSphere(): THREE.Sphere;
    /**
     * Returns a THREE.Mesh instance representing the bounding box.
     *
     * @returns A new THREE.Mesh instance representing the bounding box.
     *
     * @remarks
     * This method calculates the dimensions of the bounding box using the 'getDimensions' method.
     * It then creates a new THREE.BoxGeometry with the calculated dimensions.
     * A new THREE.Mesh is created using the box geometry, and it is added to the '_meshes' array.
     * The position of the mesh is set to the center of the bounding box.
     *
     * @example
     * '''typescript
     * const boundingBoxer = components.get(BoundingBoxer);
     * boundingBoxer.add(fragmentsGroup);
     * const boundingBoxMesh = boundingBoxer.getMesh();
     * scene.add(boundingBoxMesh);
     * '''
     */
    getMesh(): THREE.Mesh<THREE.BoxGeometry, THREE.Material | THREE.Material[], THREE.Object3DEventMap>;
    /**
     * Resets the internal minimum and maximum vectors to positive and negative infinity, respectively.
     * This method is used to prepare the BoundingBoxer for a new set of fragments.
     *
     * @remarks
     * This method is called when a new set of fragments is added to the BoundingBoxer.
     * It ensures that the bounding box calculations are accurate and up-to-date.
     *
     * @example
     * '''typescript
     * const boundingBoxer = components.get(BoundingBoxer);
     * boundingBoxer.add(fragmentsGroup);
     * // ...
     * boundingBoxer.reset();
     * '''
     */
    reset(): void;
    /**
     * Adds a FragmentsGroup to the BoundingBoxer.
     *
     * @param group - The FragmentsGroup to add.
     *
     * @remarks
     * This method iterates through each fragment in the provided FragmentsGroup,
     * and calls the 'addMesh' method for each fragment's mesh.
     *
     * @example
     * '''typescript
     * const boundingBoxer = components.get(BoundingBoxer);
     * boundingBoxer.add(fragmentsGroup);
     * '''
     */
    add(group: FragmentsGroup): void;
    /**
     * Adds a mesh to the BoundingBoxer and calculates the bounding box.
     *
     * @param mesh - The mesh to add. It can be an instance of THREE.InstancedMesh, THREE.Mesh, or FRAGS.CurveMesh.
     * @param itemIDs - An optional iterable of numbers representing the item IDs.
     *
     * @remarks
     * This method calculates the bounding box of the provided mesh and updates the internal minimum and maximum vectors.
     * If the mesh is an instance of THREE.InstancedMesh, it calculates the bounding box for each instance.
     * If the mesh is an instance of FRAGS.FragmentMesh and itemIDs are provided, it calculates the bounding box for the specified item IDs.
     *
     * @example
     * '''typescript
     * const boundingBoxer = components.get(BoundingBoxer);
     * boundingBoxer.addMesh(mesh);
     * '''
     */
    addMesh(mesh: THREE.InstancedMesh | THREE.Mesh | FRAGS.CurveMesh, itemIDs?: Iterable<number>): void;
    private static getFragmentBounds;
}
import * as THREE from "three";
import * as FRAGS from "@thatopen/fragments";
import { Disposable, Component, Event, Components } from "../../core";
/**
 * Interface representing a classification system. The classification is organized by system and class name, and each class contains a map of fragment IDs to their respective express IDs.
 */
export interface Classification {
    /**
     * A system within the classification.
     * The key is the system name, and the value is an object representing the classes within the system.
     */
    [system: string]: {
        /**
         * A class within the system.
         * The key is the class name, and the value is a map of fragment IDs to their respective express IDs.
         */
        [className: string]: FRAGS.FragmentIdMap;
    };
}
/**
 * The Classifier component is responsible for classifying and categorizing fragments based on various criteria. It provides methods to add, remove, find, and filter fragments based on their classification. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/Classifier). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/Classifier).
 */
export declare class Classifier extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "e25a7f3c-46c4-4a14-9d3d-5115f24ebeb7";
    /** {@link Component.enabled} */
    enabled: boolean;
    /**
     * A map representing the classification systems.
     * The key is the system name, and the value is an object representing the classes within the system.
     */
    list: Classification;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    constructor(components: Components);
    private onFragmentsDisposed;
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Removes a fragment from the classification based on its unique identifier (guid).
     * This method iterates through all classification systems and classes, and deletes the fragment with the specified guid from the respective group.
     *
     * @param guid - The unique identifier of the fragment to be removed.
     */
    remove(guid: string): void;
    /**
     * Finds and returns fragments based on the provided filter criteria.
     * If no filter is provided, it returns all fragments.
     *
     * @param filter - An optional object containing filter criteria.
     * The keys of the object represent the classification system names,
     * and the values are arrays of class names to match.
     *
     * @returns A map of fragment GUIDs to their respective express IDs,
     * where the express IDs are filtered based on the provided filter criteria.
     *
     * @throws Will throw an error if the fragments map is malformed.
     */
    find(filter?: {
        [name: string]: string[];
    }): FRAGS.FragmentIdMap;
    /**
     * Classifies fragments based on their modelID.
     *
     * @param modelID - The unique identifier of the model to classify fragments by.
     * @param group - The FragmentsGroup containing the fragments to be classified.
     *
     * @remarks
     * This method iterates through the fragments in the provided group,
     * and classifies them based on their modelID.
     * The classification is stored in the 'list.models' property,
     * with the modelID as the key and a map of fragment IDs to their respective express IDs as the value.
     *
     */
    byModel(modelID: string, group: FRAGS.FragmentsGroup): void;
    /**
     * Classifies fragments based on their PredefinedType property.
     *
     * @param group - The FragmentsGroup containing the fragments to be classified.
     *
     * @remarks
     * This method iterates through the properties of the fragments in the provided group,
     * and classifies them based on their PredefinedType property.
     * The classification is stored in the 'list.predefinedTypes' property,
     * with the PredefinedType as the key and a map of fragment IDs to their respective express IDs as the value.
     *
     * @throws Will throw an error if the fragment ID is not found.
     */
    byPredefinedType(group: FRAGS.FragmentsGroup): Promise<void>;
    /**
     * Classifies fragments based on their entity type.
     *
     * @param group - The FragmentsGroup containing the fragments to be classified.
     *
     * @remarks
     * This method iterates through the relations of the fragments in the provided group,
     * and classifies them based on their entity type.
     * The classification is stored in the 'list.entities' property,
     * with the entity type as the key and a map of fragment IDs to their respective express IDs as the value.
     *
     * @throws Will throw an error if the fragment ID is not found.
     */
    byEntity(group: FRAGS.FragmentsGroup): void;
    /**
     * Classifies fragments based on a specific IFC relationship.
     *
     * @param group - The FragmentsGroup containing the fragments to be classified.
     * @param ifcRel - The IFC relationship number to classify fragments by.
     * @param systemName - The name of the classification system to store the classification.
     *
     * @remarks
     * This method iterates through the relations of the fragments in the provided group,
     * and classifies them based on the specified IFC relationship.
     * The classification is stored in the 'list' property under the specified system name,
     * with the relationship name as the class name and a map of fragment IDs to their respective express IDs as the value.
     *
     * @throws Will throw an error if the fragment ID is not found or if the IFC relationship is not valid.
     */
    byIfcRel(group: FRAGS.FragmentsGroup, ifcRel: number, systemName: string): Promise<void>;
    /**
     * Classifies fragments based on their spatial structure in the IFC model.
     *
     * @param model - The FragmentsGroup containing the fragments to be classified.
     *
     * @remarks
     * This method iterates through the relations of the fragments in the provided group,
     * and classifies them based on their spatial structure in the IFC model.
     * The classification is stored in the 'list' property under the system name "spatialStructures",
     * with the relationship name as the class name and a map of fragment IDs to their respective express IDs as the value.
     *
     * @throws Will throw an error if the fragment ID is not found or if the model relations do not exist.
     */
    bySpatialStructure(model: FRAGS.FragmentsGroup): Promise<void>;
    /**
     * Sets the color of the specified fragments.
     *
     * @param items - A map of fragment IDs to their respective express IDs.
     * @param color - The color to set for the fragments.
     * @param override - A boolean indicating whether to override the existing color of the fragments.
     *
     * @remarks
     * This method iterates through the provided fragment IDs, retrieves the corresponding fragments,
     * and sets their color using the 'setColor' method of the FragmentsGroup class.
     *
     * @throws Will throw an error if the fragment with the specified ID is not found.
     */
    setColor(items: FRAGS.FragmentIdMap, color: THREE.Color, override?: boolean): void;
    /**
     * Resets the color of the specified fragments to their original color.
     *
     * @param items - A map of fragment IDs to their respective express IDs.
     *
     * @remarks
     * This method iterates through the provided fragment IDs, retrieves the corresponding fragments,
     * and resets their color using the 'resetColor' method of the FragmentsGroup class.
     *
     * @throws Will throw an error if the fragment with the specified ID is not found.
     */
    resetColor(items: FRAGS.FragmentIdMap): void;
    protected saveItem(group: FRAGS.FragmentsGroup, systemName: string, className: string, expressID: number): void;
}
import { Component, Disposable, Event, Components } from "../../core";
/**
 * The Exploder component is responsible for managing the explosion of 3D model fragments (generally by floor). ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/Exploder). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/Exploder).
 */
export declare class Exploder extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "d260618b-ce88-4c7d-826c-6debb91de3e2";
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /** {@link Component.enabled} */
    enabled: boolean;
    /**
     * The height of the explosion animation.
     * This property determines the vertical distance by which fragments are moved during the explosion.
     * Default value is 10.
     */
    height: number;
    /**
     * The group name used for the explosion animation.
     * This property specifies the group of fragments that will be affected by the explosion.
     * Default value is "storeys".
     */
    groupName: string;
    /**
     * A set of strings representing the exploded items.
     * This set is used to keep track of which items have been exploded.
     */
    list: Set<string>;
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Sets the explosion state of the fragments.
     *
     * @param active - A boolean indicating whether to activate or deactivate the explosion.
     *
     * @remarks
     * This method applies a vertical transformation to the fragments based on the 'active' parameter.
     * If 'active' is true, the fragments are moved upwards by a distance determined by the 'height' property.
     * If 'active' is false, the fragments are moved back to their original position.
     *
     * The method also keeps track of the exploded items using the 'list' set.
     *
     * @throws Will throw an error if the 'Classifier' or 'FragmentsManager' components are not found in the 'components' system.
     */
    set(active: boolean): void;
}
import * as FRAGS from "@thatopen/fragments";
import { Components, Component } from "../../core";
/**
 * A component that hides or isolates fragments within a 3D scene. It extends the base Component class and provides methods to control fragment visibility and isolation. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/Hider). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/Hider).
 */
export declare class Hider extends Component {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "dd9ccf2d-8a21-4821-b7f6-2949add16a29";
    /** {@link Component.enabled} */
    enabled: boolean;
    constructor(components: Components);
    /**
     * Sets the visibility of fragments within the 3D scene.
     * If no 'items' parameter is provided, all fragments will be set to the specified visibility.
     * If 'items' is provided, only the specified fragments will be affected.
     *
     * @param visible - The visibility state to set for the fragments.
     * @param items - An optional map of fragment IDs and their corresponding sub-fragment IDs to be affected.
     * If not provided, all fragments will be affected.
     *
     * @returns {void}
     */
    set(visible: boolean, items?: FRAGS.FragmentIdMap): void;
    /**
     * Isolates fragments within the 3D scene by hiding all other fragments and showing only the specified ones.
     * It calls the 'set' method twice: first to hide all fragments, and then to show only the specified ones.
     *
     * @param items - A map of fragment IDs and their corresponding sub-fragment IDs to be isolated.
     * If not provided, all fragments will be isolated.
     *
     * @returns {void}
     */
    isolate(items: FRAGS.FragmentIdMap): void;
    private updateCulledVisibility;
}
import * as WEBIFC from "web-ifc";
import * as FRAGS from "@thatopen/fragments";
import { IfcFragmentSettings } from "./src";
import { Component, Components, Event, Disposable } from "../../core";
/**
 * The IfcLoader component is responsible for loading and processing IFC files. It utilizes the Web-IFC library to handle the IFC data and the Three.js library for 3D rendering. The class provides methods for setting up, loading, and cleaning up IFC files. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/IfcLoader). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/IfcLoader).
 */
export declare class IfcLoader extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "a659add7-1418-4771-a0d6-7d4d438e4624";
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<string>;
    /**
     * An event triggered when the IFC file starts loading.
     */
    readonly onIfcStartedLoading: Event<void>;
    /**
     * An event triggered when the setup process is completed.
     */
    readonly onSetup: Event<void>;
    /**
     * The settings for the IfcLoader.
     * It includes options for excluding categories, setting WASM paths, and more.
     */
    settings: IfcFragmentSettings;
    /**
     * The instance of the Web-IFC library used for handling IFC data.
     */
    webIfc: WEBIFC.IfcAPI;
    /** {@link Component.enabled} */
    enabled: boolean;
    private _material;
    private _spatialTree;
    private _metaData;
    private _fragmentInstances;
    private _civil;
    private _visitedFragments;
    private _materialT;
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Sets up the IfcLoader component with the provided configuration.
     *
     * @param config - Optional configuration settings for the IfcLoader.
     * If not provided, the existing settings will be used.
     *
     * @returns A Promise that resolves when the setup process is completed.
     *
     * @remarks
     * If the 'autoSetWasm' option is enabled in the configuration,
     * the method will automatically set the WASM paths for the Web-IFC library.
     *
     * @example
     * '''typescript
     * const ifcLoader = new IfcLoader(components);
     * await ifcLoader.setup({ autoSetWasm: true });
     * '''
     */
    setup(config?: Partial<IfcFragmentSettings>): Promise<void>;
    /**
     * Loads an IFC file and processes it for 3D visualization.
     *
     * @param data - The Uint8Array containing the IFC file data.
     * @param coordinate - Optional boolean indicating whether to coordinate the loaded IFC data. Default is true.
     *
     * @returns A Promise that resolves to the FragmentsGroup containing the loaded and processed IFC data.
     *
     * @example
     * '''typescript
     * const ifcLoader = components.get(IfcLoader);
     * const group = await ifcLoader.load(ifcData);
     * '''
     */
    load(data: Uint8Array, coordinate?: boolean): Promise<FRAGS.FragmentsGroup>;
    /**
     * Reads an IFC file and initializes the Web-IFC library.
     *
     * @param data - The Uint8Array containing the IFC file data.
     *
     * @returns A Promise that resolves when the IFC file is opened and initialized.
     *
     * @remarks
     * This method sets the WASM path and initializes the Web-IFC library based on the provided settings.
     * It also opens the IFC model using the provided data and settings.
     *
     * @example
     * '''typescript
     * const ifcLoader = components.get(IfcLoader);
     * await ifcLoader.readIfcFile(ifcData);
     * '''
     */
    readIfcFile(data: Uint8Array): Promise<number>;
    /**
     * Cleans up the IfcLoader component by resetting the Web-IFC library,
     * clearing the visited fragments and fragment instances maps, and creating a new instance of the Web-IFC library.
     *
     * @remarks
     * This method is called automatically after using the .load() method, so usually you don't need to use it manually.
     *
     * @example
     * '''typescript
     * const ifcLoader = components.get(IfcLoader);
     * ifcLoader.cleanUp();
     * '''
     */
    cleanUp(): void;
    private getAllGeometries;
    private getMesh;
    private getGeometry;
    private autoSetWasm;
}
import { Fragment, FragmentsGroup } from "@thatopen/fragments";
import * as THREE from "three";
import * as FRAGS from "@thatopen/fragments";
import { Component, Components, Event, Disposable } from "../../core";
import { RelationsMap } from "../../ifc/IfcRelationsIndexer/src/types";
/**
 * Component to load, delete and manage [fragments](https://github.com/ThatOpen/engine_fragment) efficiently. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/FragmentsManager). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/FragmentsManager).
 */
export declare class FragmentsManager extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "fef46874-46a3-461b-8c44-2922ab77c806";
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /**
     * Event triggered when fragments are loaded.
     */
    readonly onFragmentsLoaded: Event<FragmentsGroup>;
    /**
     * Event triggered when fragments are disposed.
     */
    readonly onFragmentsDisposed: Event<{
        groupID: string;
        fragmentIDs: string[];
    }>;
    /**
     * Map containing all loaded fragments.
     * The key is the fragment's unique identifier, and the value is the fragment itself.
     */
    readonly list: Map<string, Fragment>;
    /**
     * Map containing all loaded fragment groups.
     * The key is the group's unique identifier, and the value is the group itself.
     */
    readonly groups: Map<string, FragmentsGroup>;
    baseCoordinationModel: string;
    /** {@link Component.enabled} */
    enabled: boolean;
    private _loader;
    /**
     * Getter for the meshes of all fragments in the FragmentsManager.
     * It iterates over the fragments in the list and pushes their meshes into an array.
     * @returns {THREE.Mesh[]} An array of THREE.Mesh objects representing the fragments.
     */
    get meshes(): THREE.Mesh<THREE.BufferGeometry<THREE.NormalBufferAttributes>, THREE.Material | THREE.Material[], THREE.Object3DEventMap>[];
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Dispose of a specific fragment group.
     * This method removes the group from the groups map, deletes all fragments within the group from the list,
     * disposes of the group, and triggers the onFragmentsDisposed event.
     *
     * @param group - The fragment group to be disposed.
     */
    disposeGroup(group: FragmentsGroup): void;
    /**
     * Loads a binary file that contain fragment geometry.
     * @param data - The binary data to load.
     * @param config - Optional configuration for loading.
     * @param config.coordinate - Whether to apply coordinate transformation. Default is true.
     * @param config.properties - Ifc properties to set on the loaded fragments. Not to be used when streaming.
     * @returns The loaded FragmentsGroup.
     */
    load(data: Uint8Array, config?: Partial<{
        coordinate: boolean;
        name: string;
        properties: FRAGS.IfcProperties;
        relationsMap: RelationsMap;
    }>): FragmentsGroup;
    /**
     * Export the specified fragmentsgroup to binary data.
     * @param group - the fragments group to be exported.
     * @returns the exported data as binary buffer.
     */
    export(group: FragmentsGroup): Uint8Array;
    /**
     * Gets a map of model IDs to sets of express IDs for the given fragment ID map.
     * @param fragmentIdMap - A map of fragment IDs to their corresponding express IDs.
     * @returns A map of model IDs to sets of express IDs.
     */
    getModelIdMap(fragmentIdMap: FRAGS.FragmentIdMap): {
        [modelID: string]: Set<number>;
    };
    /**
     * Converts a map of model IDs to sets of express IDs to a fragment ID map.
     * @param modelIdMap - A map of model IDs to their corresponding express IDs.
     * @returns A fragment ID map.
     * @remarks
     * This method iterates through the provided model ID map, retrieves the corresponding model from the 'groups' map,
     * and then calls the 'getFragmentMap' method of the model to obtain a fragment ID map for the given express IDs.
     * The fragment ID maps are then merged into a single map and returned.
     * If a model with a given ID is not found in the 'groups' map, the method skips that model and continues with the next one.
     */
    modelIdToFragmentIdMap(modelIdMap: {
        [modelID: string]: Set<number>;
    }): FRAGS.FragmentIdMap;
    /**
     * Applies coordinate transformation to the provided models.
     * If no models are provided, all groups are used.
     * The first model in the list becomes the base model for coordinate transformation.
     * All other models are then transformed to match the base model's coordinate system.
     *
     * @param models - The models to apply coordinate transformation to.
     * If not provided, all groups are used.
     *
     * @returns {void}
     */
    coordinate(models?: FragmentsGroup[]): void;
}
import * as WEBIFC from "web-ifc";
import { Components, Disposable, Event, Component } from "../../core";
import { IfcStreamingSettings, StreamedGeometries, StreamedAsset } from "./src";
/**
 * A component that handles the tiling of IFC geometries for efficient streaming. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/IfcGeometryTiler). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/IfcGeometryTiler).
 */
export declare class IfcGeometryTiler extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "d9999a00-e1f5-4d3f-8cfe-c56e08609764";
    /**
     * Event triggered when geometry is streamed.
     * Contains the streamed geometry data and its buffer.
     */
    readonly onGeometryStreamed: Event<{
        buffer: Uint8Array;
        data: StreamedGeometries;
    }>;
    /**
     * Event triggered when assets are streamed.
     * Contains the streamed assets.
     */
    readonly onAssetStreamed: Event<StreamedAsset[]>;
    /**
     * Event triggered to indicate the progress of the streaming process.
     * Contains the progress percentage.
     */
    readonly onProgress: Event<number>;
    /**
     * Event triggered when the IFC file is loaded.
     * Contains the loaded IFC file data.
     */
    readonly onIfcLoaded: Event<Uint8Array>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /**
     * Settings for the IfcGeometryTiler.
     */
    settings: IfcStreamingSettings;
    /** {@link Component.enabled} */
    enabled: boolean;
    /**
     * The WebIFC API instance used for IFC file processing.
     */
    webIfc: WEBIFC.IfcAPI;
    private _spatialTree;
    private _metaData;
    private _visitedGeometries;
    private _streamSerializer;
    private _geometries;
    private _geometryCount;
    private _civil;
    private _groupSerializer;
    private _assets;
    private _meshesWithHoles;
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * This method streams the IFC file from a given buffer.
     *
     * @param data - The Uint8Array containing the IFC file data.
     * @returns A Promise that resolves when the streaming process is complete.
     *
     * @remarks
     * This method cleans up any resources after the streaming process is complete.
     *
     * @example
     * '''typescript
     * const ifcData = await fetch('path/to/ifc/file.ifc');
     * const rawBuffer = await response.arrayBuffer();
     * const ifcBuffer = new Uint8Array(rawBuffer);
     * await ifcGeometryTiler.streamFromBuffer(ifcBuffer);
     * '''
     */
    streamFromBuffer(data: Uint8Array): Promise<void>;
    /**
     * This method streams the IFC file from a given callback.
     *
     * @param loadCallback - The callback function that will be used to load the IFC file.
     * @returns A Promise that resolves when the streaming process is complete.
     *
     * @remarks
     * This method cleans up any resources after the streaming process is complete.
     *
     */
    streamFromCallBack(loadCallback: WEBIFC.ModelLoadCallback): Promise<void>;
    private readIfcFile;
    private streamIfcFile;
    private streamAllGeometries;
    private cleanUp;
    private getMesh;
    private getGeometry;
    private streamAssets;
    private streamGeometries;
}
import * as WEBIFC from "web-ifc";
import { AsyncEvent, Component, Disposable, Event } from "../../core";
import { PropertiesStreamingSettings } from "./src";
/**
 * A component that converts the properties of an IFC file to tiles. It uses the Web-IFC library to read and process the IFC data. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/IfcPropertiesTiler). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/IfcPropertiesTiler).
 */
export declare class IfcPropertiesTiler extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "88d2c89c-ce32-47d7-8cb6-d51e4b311a0b";
    /**
     * An event that is triggered when properties are streamed from the IFC file.
     * The event provides the type of the IFC entity and the corresponding data.
     */
    readonly onPropertiesStreamed: AsyncEvent<{
        type: number;
        data: {
            [id: number]: any;
        };
    }>;
    /**
     * An event that is triggered to indicate the progress of the streaming process.
     * The event provides a number between 0 and 1 representing the progress percentage.
     */
    readonly onProgress: AsyncEvent<number>;
    /**
     * An event that is triggered when indices are streamed from the IFC file.
     * The event provides a map of indices, where the key is the entity type and the value is another map of indices.
     */
    readonly onIndicesStreamed: AsyncEvent<Map<number, Map<number, number[]>>>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<string>;
    /** {@link Component.enabled} */
    enabled: boolean;
    /**
     * An instance of the PropertiesStreamingSettings class, which holds the settings for the streaming process.
     */
    settings: PropertiesStreamingSettings;
    /**
     * An instance of the IfcAPI class from the Web-IFC library, which provides methods for reading and processing IFC data.
     */
    webIfc: WEBIFC.IfcAPI;
    /** {@link Disposable.dispose} */
    dispose(): Promise<void>;
    /**
     * This method converts properties from an IFC file to tiles given its data as a Uint8Array.
     *
     * @param data - The Uint8Array containing the IFC file data.
     * @returns A Promise that resolves when the streaming process is complete.
     */
    streamFromBuffer(data: Uint8Array): Promise<void>;
    /**
     * This method converts properties from an IFC file to tiles using a given callback function to read the file.
     *
     * @param loadCallback - A callback function that loads the IFC file data.
     * @returns A Promise that resolves when the streaming process is complete.
     */
    streamFromCallBack(loadCallback: WEBIFC.ModelLoadCallback): Promise<void>;
    private readIfcFile;
    private streamIfcFile;
    private streamAllProperties;
    private cleanUp;
}
import * as WEBIFC from "web-ifc";
import * as FRAG from "@thatopen/fragments";
import { Component, Components } from "../../core";
/**
 * Component to export all the properties from an IFC to a JS object. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/IfcJsonExporter). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/IfcJsonExporter).
 */
export declare class IfcJsonExporter extends Component {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "b32c4332-cd67-436e-ba7f-196646c7a635";
    /** {@link Component.enabled} */
    enabled: boolean;
    constructor(components: Components);
    /**
     * Exports all the properties of an IFC into an array of JS objects.
     * @param webIfc The instance of [web-ifc](https://github.com/ThatOpen/engine_web-ifc) to use.
     * @param modelID ID of the IFC model whose properties to extract.
     * @param indirect whether to get the indirect relationships as well.
     * @param recursiveSpatial whether to get the properties of spatial items recursively
     * to make the location data available (e.g. absolute position of building).
     */
    export(webIfc: WEBIFC.IfcAPI, modelID: number, indirect?: boolean, recursiveSpatial?: boolean): Promise<FRAG.IfcProperties>;
}
import * as THREE from "three";
export declare function obbFromPoints(vertices: ArrayLike<number>): {
    center: THREE.Vector3;
    halfSizes: THREE.Vector3;
    rotation: THREE.Matrix3;
    transformation: THREE.Matrix4;
};
export declare function isPointInFrontOfPlane(point: number[], planePoint: number[], planeNormal: number[]): boolean;
import * as THREE from "three";
export declare class MaterialsUtils {
    static isTransparent(material: THREE.Material): boolean;
}
export declare class UUID {
    private static _pattern;
    private static _lut;
    static create(): string;
    static validate(uuid: string): void;
}
import * as THREE from "three";
import { Component, Components, Disposable, Event, World } from "../core";
/**
 * Configuration interface for the VertexPicker component.
 */
export interface VertexPickerConfig {
    /**
     * If true, only vertices will be picked, not the closest point on the face.
     */
    showOnlyVertex: boolean;
    /**
     * The maximum distance for snapping to a vertex.
     */
    snapDistance: number;
    /**
     * The HTML element to use for previewing the picked vertex.
     */
    previewElement: HTMLElement;
}
/**
 * A class that provides functionality for picking vertices in a 3D scene.
 */
export declare class VertexPicker extends Component implements Disposable {
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /**
     * An event that is triggered when a vertex is found.
     * The event passes a THREE.Vector3 representing the position of the found vertex.
     */
    readonly onVertexFound: Event<THREE.Vector3>;
    /**
     * An event that is triggered when a vertex is lost.
     * The event passes a THREE.Vector3 representing the position of the lost vertex.
     */
    readonly onVertexLost: Event<THREE.Vector3>;
    /**
     * A reference to the Components instance associated with this VertexPicker.
     */
    components: Components;
    /**
     * A reference to the working plane used for vertex picking.
     * This plane is used to determine which vertices are considered valid for picking.
     * If this value is null, all vertices are considered valid.
     */
    workingPlane: THREE.Plane | null;
    private _pickedPoint;
    private _config;
    private _enabled;
    /**
     * Sets the enabled state of the VertexPicker.
     * When enabled, the VertexPicker will actively search for vertices in the 3D scene.
     * When disabled, the VertexPicker will stop searching for vertices and reset the picked point.
     *
     * @param value - The new enabled state.
     */
    set enabled(value: boolean);
    /**
     * Gets the current enabled state of the VertexPicker.
     *
     * @returns The current enabled state.
     */
    get enabled(): boolean;
    /**
     * Sets the configuration for the VertexPicker component.
     *
     * @param value - A Partial object containing the configuration properties to update.
     * The properties not provided in the value object will retain their current values.
     *
     * @example
     * '''typescript
     * vertexPicker.config = {
     *   snapDistance: 0.5,
     *   showOnlyVertex: true,
     * };
     * '''
     */
    set config(value: Partial<VertexPickerConfig>);
    /**
     * Gets the current configuration for the VertexPicker component.
     *
     * @returns A copy of the current VertexPickerConfig object.
     *
     * @example
     * '''typescript
     * const currentConfig = vertexPicker.config;
     * console.log(currentConfig.snapDistance); // Output: 0.25
     * '''
     */
    get config(): Partial<VertexPickerConfig>;
    constructor(components: Components, config?: Partial<VertexPickerConfig>);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Performs the vertex picking operation based on the current state of the VertexPicker.
     *
     * @param world - The World instance to use for raycasting.
     *
     * @returns The current picked point, or null if no point is picked.
     *
     * @remarks
     * This method checks if the VertexPicker is enabled. If not, it returns the current picked point.
     * If enabled, it performs raycasting to find the closest intersecting object.
     * It then determines the closest vertex or point on the face, based on the configuration settings.
     * If the picked point is on the working plane (if defined), it triggers the 'onVertexFound' event and updates the 'pickedPoint'.
     * If the picked point is not on the working plane, it resets the 'pickedPoint'.
     * If no intersecting object is found, it triggers the 'onVertexLost' event and resets the 'pickedPoint'.
     */
    get(world: World): THREE.Vector3 | null;
    private getClosestVertex;
    private getVertices;
    private getVertex;
}
import * as WEBIFC from "web-ifc";
import { FragmentsGroup } from "@thatopen/fragments";
import { Disposable, Event, Component, Components } from "../../core";
import { RelationsMap, ModelsRelationMap, InverseAttribute } from "./src/types";
export type { InverseAttribute, RelationsMap } from "./src/types";
/**
 * Indexer component for IFC entities, facilitating the indexing and retrieval of IFC entity relationships. It is designed to process models properties by indexing their IFC entities' relations based on predefined inverse attributes, and provides methods to query these relations. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/IfcRelationsIndexer). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/IfcRelationsIndexer).
 */
export declare class IfcRelationsIndexer extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "23a889ab-83b3-44a4-8bee-ead83438370b";
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<string>;
    /**
     * Event triggered when relations for a model have been indexed.
     * This event provides the model's UUID and the relations map generated for that model.
     *
     * @property {string} modelID - The UUID of the model for which relations have been indexed.
     * @property {RelationsMap} relationsMap - The relations map generated for the specified model.
     * The map keys are expressIDs of entities, and the values are maps where each key is a relation type ID and its value is an array of expressIDs of entities related through that relation type.
     */
    readonly onRelationsIndexed: Event<{
        modelID: string;
        relationsMap: RelationsMap;
    }>;
    /**
     * Holds the relationship mappings for each model processed by the indexer.
     * The structure is a map where each key is a model's UUID, and the value is another map.
     * This inner map's keys are entity expressIDs, and its values are maps where each key is an index
     * representing a specific relation type, and the value is an array of expressIDs of entities
     * that are related through that relation type. This structure allows for efficient querying
     * of entity relationships within a model.
     */
    readonly relationMaps: ModelsRelationMap;
    /** {@link Component.enabled} */
    enabled: boolean;
    private _relToAttributesMap;
    private _inverseAttributes;
    private _ifcRels;
    constructor(components: Components);
    private onFragmentsDisposed;
    private indexRelations;
    /**
     * Adds a relation map to the model's relations map.
     *
     * @param model - The 'FragmentsGroup' model to which the relation map will be added.
     * @param relationMap - The 'RelationsMap' to be added to the model's relations map.
     *
     * @fires onRelationsIndexed - Triggers an event with the model's UUID and the added relation map.
     */
    setRelationMap(model: FragmentsGroup, relationMap: RelationsMap): void;
    /**
     * Processes a given model to index its IFC entities relations based on predefined inverse attributes.
     * This method iterates through each specified inverse attribute, retrieves the corresponding relations,
     * and maps them in a structured way to facilitate quick access to related entities.
     *
     * The process involves querying the model for each relation type associated with the inverse attributes
     * and updating the internal relationMaps with the relationships found. This map is keyed by the model's UUID
     * and contains a nested map where each key is an entity's expressID and its value is another map.
     * This inner map's keys are the indices of the inverse attributes, and its values are arrays of expressIDs
     * of entities that are related through that attribute.
     *
     * @param model The 'FragmentsGroup' model to be processed. It must have properties loaded.
     * @returns A promise that resolves to the relations map for the processed model. This map is a detailed
     * representation of the relations indexed by entity expressIDs and relation types.
     * @throws An error if the model does not have properties loaded.
     */
    process(model: FragmentsGroup): Promise<RelationsMap>;
    /**
     * Processes a given model from a WebIfc API to index its IFC entities relations.
     *
     * @param ifcApi - The WebIfc API instance from which to retrieve the model's properties.
     * @param modelID - The unique identifier of the model within the WebIfc API.
     * @returns A promise that resolves to the relations map for the processed model.
     *          This map is a detailed representation of the relations indexed by entity expressIDs and relation types.
     */
    processFromWebIfc(ifcApi: WEBIFC.IfcAPI, modelID: number): Promise<RelationsMap>;
    /**
     * Retrieves the relations of a specific entity within a model based on the given relation name.
     * This method searches the indexed relation maps for the specified model and entity,
     * returning the IDs of related entities if a match is found.
     *
     * @param model The 'FragmentsGroup' model containing the entity.
     * @param expressID The unique identifier of the entity within the model.
     * @param relationName The IFC schema inverse attribute of the relation to search for (e.g., "IsDefinedBy", "ContainsElements").
     * @returns An array of express IDs representing the related entities, or 'null' if no relations are found
     * or the specified relation name is not indexed.
     */
    getEntityRelations(model: FragmentsGroup, expressID: number, relationName: InverseAttribute): number[] | null;
    /**
     * Serializes the relations of a given relation map into a JSON string.
     * This method iterates through the relations in the given map, organizing them into a structured object where each key is an expressID of an entity,
     * and its value is another object mapping relation indices to arrays of related entity expressIDs.
     * The resulting object is then serialized into a JSON string.
     *
     * @param relationMap - The map of relations to be serialized. The map keys are expressIDs of entities, and the values are maps where each key is a relation type ID and its value is an array of expressIDs of entities related through that relation type.
     * @returns A JSON string representing the serialized relations of the given relation map.
     */
    serializeRelations(relationMap: RelationsMap): string;
    /**
     * Serializes the relations of a specific model into a JSON string.
     * This method iterates through the relations indexed for the given model,
     * organizing them into a structured object where each key is an expressID of an entity,
     * and its value is another object mapping relation indices to arrays of related entity expressIDs.
     * The resulting object is then serialized into a JSON string.
     *
     * @param model The 'FragmentsGroup' model whose relations are to be serialized.
     * @returns A JSON string representing the serialized relations of the specified model.
     * If the model has no indexed relations, 'null' is returned.
     */
    serializeModelRelations(model: FragmentsGroup): string | null;
    /**
     * Serializes all relations of every model processed by the indexer into a JSON string.
     * This method iterates through each model's relations indexed in 'relationMaps', organizing them
     * into a structured JSON object. Each top-level key in this object corresponds to a model's UUID,
     * and its value is another object mapping entity expressIDs to their related entities, categorized
     * by relation types. The structure facilitates easy access to any entity's relations across all models.
     *
     * @returns A JSON string representing the serialized relations of all models processed by the indexer.
     *          If no relations have been indexed, an empty object is returned as a JSON string.
     */
    serializeAllRelations(): string;
    /**
     * Converts a JSON string representing relations between entities into a structured map.
     * This method parses the JSON string to reconstruct the relations map that indexes
     * entity relations by their express IDs. The outer map keys are the express IDs of entities,
     * and the values are maps where each key is a relation type ID and its value is an array
     * of express IDs of entities related through that relation type.
     *
     * @param json The JSON string to be parsed into the relations map.
     * @returns A 'Map' where the key is the express ID of an entity as a number, and the value
     * is another 'Map'. This inner map's key is the relation type ID as a number, and its value
     * is an array of express IDs (as numbers) of entities related through that relation type.
     */
    getRelationsMapFromJSON(json: string): RelationsMap;
    /** {@link Disposable.dispose} */
    dispose(): void;
}
import * as WEBIFC from "web-ifc";
import { FragmentsGroup } from "@thatopen/fragments";
import { Component, Disposable, Event, Components } from "../../core";
/**
 * Types for boolean properties in IFC schema.
 */
export type BooleanPropTypes = "IfcBoolean" | "IfcLogical";
/**
 * Types for string properties in IFC schema.
 */
export type StringPropTypes = "IfcText" | "IfcLabel" | "IfcIdentifier";
/**
 * Types for numeric properties in IFC schema.
 */
export type NumericPropTypes = "IfcInteger" | "IfcReal";
/**
 * Interface representing a map of changed entities in a model. The keys are model UUIDs, and the values are sets of express IDs of changed entities.
 */
export interface ChangeMap {
    [modelID: string]: Set<number>;
}
/**
 * Interface representing a map of attribute listeners. The keys are model UUIDs, and the values are objects with express IDs as keys, and objects with attribute names as keys, and Event objects as values.
 */
export interface AttributeListener {
    [modelID: string]: {
        [expressID: number]: {
            [attributeName: string]: Event<String | Boolean | Number>;
        };
    };
}
/**
 * Component to manage and edit properties and Psets in IFC files.
 */
export declare class IfcPropertiesManager extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "58c2d9f0-183c-48d6-a402-dfcf5b9a34df";
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<string>;
    /**
     * Event triggered when a file is requested for export.
     */
    readonly onRequestFile: Event<unknown>;
    /**
     * ArrayBuffer containing the IFC data to be exported.
     */
    ifcToExport: ArrayBuffer | null;
    /**
     * Event triggered when an element is added to a Pset.
     */
    readonly onElementToPset: Event<{
        model: FragmentsGroup;
        psetID: number;
        elementID: number;
    }>;
    /**
     * Event triggered when a property is added to a Pset.
     */
    readonly onPropToPset: Event<{
        model: FragmentsGroup;
        psetID: number;
        propID: number;
    }>;
    /**
     * Event triggered when a Pset is removed.
     */
    readonly onPsetRemoved: Event<{
        model: FragmentsGroup;
        psetID: number;
    }>;
    /**
     * Event triggered when data in the model changes.
     */
    readonly onDataChanged: Event<{
        model: FragmentsGroup;
        expressID: number;
    }>;
    /**
     * Configuration for the WebAssembly module.
     */
    wasm: {
        path: string;
        absolute: boolean;
    };
    /** {@link Component.enabled} */
    enabled: boolean;
    /**
     * Map of attribute listeners.
     */
    attributeListeners: AttributeListener;
    /**
     * The currently selected model.
     */
    selectedModel?: FragmentsGroup;
    /**
     * Map of changed entities in the model.
     */
    changeMap: ChangeMap;
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Static method to retrieve the IFC schema from a given model.
     *
     * @param model - The FragmentsGroup model from which to retrieve the IFC schema.
     * @throws Will throw an error if the IFC schema is not found in the model.
     * @returns The IFC schema associated with the given model.
     */
    static getIFCSchema(model: FragmentsGroup): import("@thatopen/fragments").IfcSchema;
    /**
     * Method to set properties data in the model.
     *
     * @param model - The FragmentsGroup model in which to set the properties.
     * @param dataToSave - An array of objects representing the properties to be saved.
     * Each object must have an 'expressID' property, which is the express ID of the entity in the model.
     * The rest of the properties will be set as the properties of the entity.
     *
     * @returns {Promise<void>} A promise that resolves when all the properties have been set.
     *
     * @throws Will throw an error if any of the 'expressID' properties are missing in the 'dataToSave' array.
     */
    setData(model: FragmentsGroup, ...dataToSave: Record<string, any>[]): Promise<void>;
    /**
     * Creates a new Property Set (Pset) in the given model.
     *
     * @param model - The FragmentsGroup model in which to create the Pset.
     * @param name - The name of the Pset.
     * @param description - (Optional) The description of the Pset.
     *
     * @returns A promise that resolves with an object containing the newly created Pset and its relation.
     *
     * @throws Will throw an error if the IFC schema is not found in the model.
     * @throws Will throw an error if no OwnerHistory is found in the model.
     */
    newPset(model: FragmentsGroup, name: string, description?: string): Promise<{
        pset: WEBIFC.IFC2X3.IfcPropertySet | WEBIFC.IFC4.IfcPropertySet | WEBIFC.IFC4X3.IfcPropertySet;
        rel: WEBIFC.IFC4X3.IfcRelDefinesByProperties | WEBIFC.IFC4.IfcRelDefinesByProperties | WEBIFC.IFC2X3.IfcRelDefinesByProperties;
    }>;
    /**
     * Removes a Property Set (Pset) from the given model.
     *
     * @param model - The FragmentsGroup model from which to remove the Pset.
     * @param psetID - The express IDs of the Psets to be removed.
     *
     * @returns {Promise<void>} A promise that resolves when all the Psets have been removed.
     *
     * @throws Will throw an error if any of the 'expressID' properties are missing in the 'psetID' array.
     * @throws Will throw an error if the Pset to be removed is not of type 'IFCPROPERTYSET'.
     * @throws Will throw an error if no relation is found between the Pset and the model.
     */
    removePset(model: FragmentsGroup, ...psetID: number[]): Promise<void>;
    /**
     * Creates a new single-value property of type string in the given model.
     *
     * @param model - The FragmentsGroup model in which to create the property.
     * @param type - The type of the property value. Must be a string property type.
     * @param name - The name of the property.
     * @param value - The value of the property. Must be a string.
     *
     * @returns The newly created single-value property.
     *
     * @throws Will throw an error if the IFC schema is not found in the model.
     * @throws Will throw an error if no OwnerHistory is found in the model.
     */
    newSingleStringProperty(model: FragmentsGroup, type: StringPropTypes, name: string, value: string): Promise<WEBIFC.IFC2X3.IfcPropertySingleValue | WEBIFC.IFC4.IfcPropertySingleValue | WEBIFC.IFC4X3.IfcPropertySingleValue>;
    /**
     * Creates a new single-value property of type numeric in the given model.
     *
     * @param model - The FragmentsGroup model in which to create the property.
     * @param type - The type of the property value. Must be a numeric property type.
     * @param name - The name of the property.
     * @param value - The value of the property. Must be a number.
     *
     * @returns The newly created single-value property.
     *
     * @throws Will throw an error if the IFC schema is not found in the model.
     * @throws Will throw an error if no OwnerHistory is found in the model.
     */
    newSingleNumericProperty(model: FragmentsGroup, type: NumericPropTypes, name: string, value: number): Promise<WEBIFC.IFC2X3.IfcPropertySingleValue | WEBIFC.IFC4.IfcPropertySingleValue | WEBIFC.IFC4X3.IfcPropertySingleValue>;
    /**
     * Creates a new single-value property of type boolean in the given model.
     *
     * @param model - The FragmentsGroup model in which to create the property.
     * @param type - The type of the property value. Must be a boolean property type.
     * @param name - The name of the property.
     * @param value - The value of the property. Must be a boolean.
     *
     * @returns The newly created single-value property.
     *
     * @throws Will throw an error if the IFC schema is not found in the model.
     * @throws Will throw an error if no OwnerHistory is found in the model.
     */
    newSingleBooleanProperty(model: FragmentsGroup, type: BooleanPropTypes, name: string, value: boolean): Promise<WEBIFC.IFC2X3.IfcPropertySingleValue | WEBIFC.IFC4.IfcPropertySingleValue | WEBIFC.IFC4X3.IfcPropertySingleValue>;
    /**
     * Removes a property from a Property Set (Pset) in the given model.
     *
     * @param model - The FragmentsGroup model from which to remove the property.
     * @param psetID - The express ID of the Pset from which to remove the property.
     * @param propID - The express ID of the property to be removed.
     *
     * @returns {Promise<void>} A promise that resolves when the property has been removed.
     *
     * @throws Will throw an error if the Pset or the property to be removed are not found in the model.
     * @throws Will throw an error if the Pset to be removed is not of type 'IFCPROPERTYSET'.
     */
    removePsetProp(model: FragmentsGroup, psetID: number, propID: number): Promise<void>;
    addElementToPset(model: FragmentsGroup, psetID: number, ...elementID: number[]): Promise<void>;
    /**
     * Adds elements to a Property Set (Pset) in the given model.
     *
     * @param model - The FragmentsGroup model in which to add the elements.
     * @param psetID - The express ID of the Pset to which to add the elements.
     * @param elementID - The express IDs of the elements to be added.
     *
     * @returns {Promise<void>} A promise that resolves when all the elements have been added.
     *
     * @throws Will throw an error if the Pset or the elements to be added are not found in the model.
     * @throws Will throw an error if the Pset to be added to is not of type 'IFCPROPERTYSET'.
     * @throws Will throw an error if no relation is found between the Pset and the model.
     */
    addPropToPset(model: FragmentsGroup, psetID: number, ...propID: number[]): Promise<void>;
    /**
     * Saves the changes made to the model to a new IFC file.
     *
     * @param model - The FragmentsGroup model from which to save the changes.
     * @param ifcToSaveOn - The Uint8Array representing the original IFC file.
     *
     * @returns A promise that resolves with the modified IFC data as a Uint8Array.
     *
     * @throws Will throw an error if any issues occur during the saving process.
     */
    saveToIfc(model: FragmentsGroup, ifcToSaveOn: Uint8Array): Promise<Uint8Array>;
    /**
     * Sets an attribute listener for a specific attribute of an entity in the model.
     * The listener will trigger an event whenever the attribute's value changes.
     *
     * @param model - The FragmentsGroup model in which to set the attribute listener.
     * @param expressID - The express ID of the entity for which to set the listener.
     * @param attributeName - The name of the attribute for which to set the listener.
     *
     * @returns The event that will be triggered when the attribute's value changes.
     *
     * @throws Will throw an error if the entity with the given expressID doesn't exist.
     * @throws Will throw an error if the attribute is an array or null, and it can't have a listener.
     * @throws Will throw an error if the attribute has a badly defined handle.
     */
    setAttributeListener(model: FragmentsGroup, expressID: number, attributeName: string): Promise<Event<String | Number | Boolean>>;
    private increaseMaxID;
    private newGUID;
    private getOwnerHistory;
    private registerChange;
    private newSingleProperty;
}
import * as THREE from "three";
import { Component, Components } from "../../core";
/**
 * Represents an edge measurement result.
 */
export interface MeasureEdge {
    /**
     * The distance between the two points of the edge.
     */
    distance: number;
    /**
     * The two points that define the edge.
     */
    points: THREE.Vector3[];
}
/**
 * Utility component for performing measurements on 3D meshes by providing methods for measuring distances between edges and faces. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/MeasurementUtils). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/MeasurementUtils).
 */
export declare class MeasurementUtils extends Component {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static uuid: string;
    /** {@link Component.enabled} */
    enabled: boolean;
    constructor(components: Components);
    /**
     * Utility method to calculate the distance from a point to a line segment.
     *
     * @param point - The point from which to calculate the distance.
     * @param lineStart - The start point of the line segment.
     * @param lineEnd - The end point of the line segment.
     * @param clamp - If true, the distance will be clamped to the line segment's length.
     * @returns The distance from the point to the line segment.
     */
    static distanceFromPointToLine(point: THREE.Vector3, lineStart: THREE.Vector3, lineEnd: THREE.Vector3, clamp?: boolean): number;
    /**
     * Method to get the face of a mesh that contains a given triangle index.
     * It also returns the edges of the found face and their indices.
     *
     * @param mesh - The mesh to get the face from. It must be indexed.
     * @param triangleIndex - The index of the triangle within the mesh.
     * @param instance - The instance of the mesh (optional).
     * @returns An object containing the edges of the found face and their indices, or null if no face was found.
     */
    getFace(mesh: THREE.InstancedMesh | THREE.Mesh, triangleIndex: number, instance?: number): {
        edges: MeasureEdge[];
        indices: Set<number>;
    } | null;
    /**
     * Method to get the vertices and normal of a mesh face at a given index.
     * It also applies instance transformation if provided.
     *
     * @param mesh - The mesh to get the face from. It must be indexed.
     * @param faceIndex - The index of the face within the mesh.
     * @param instance - The instance of the mesh (optional).
     * @returns An object containing the vertices and normal of the face.
     * @throws Will throw an error if the geometry is not indexed.
     */
    getVerticesAndNormal(mesh: THREE.Mesh | THREE.InstancedMesh, faceIndex: number, instance: number | undefined): {
        p1: THREE.Vector3;
        p2: THREE.Vector3;
        p3: THREE.Vector3;
        faceNormal: THREE.Vector3;
    };
    /**
     * Method to round the vector's components to a specified number of decimal places.
     * This is used to ensure numerical precision in edge detection.
     *
     * @param vector - The vector to round.
     * @returns The vector with rounded components.
     */
    round(vector: THREE.Vector3): void;
    private getFaceData;
}
/**
 * A Set of unique numbers representing different types of IFC geometries.
 */
export declare const GeometryTypes: Set<number>;
import * as THREE from "three";
import { Resizeable, Updateable, World, Event, Disposable } from "../../Types";
/**
 * A class representing a 2D minimap of a 3D world.
 */
export declare class MiniMap implements Resizeable, Updateable, Disposable {
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /** {@link Updateable.onAfterUpdate} */
    readonly onAfterUpdate: Event<unknown>;
    /** {@link Updateable.onBeforeUpdate} */
    readonly onBeforeUpdate: Event<unknown>;
    /** {@link Resizeable.onResize} */
    readonly onResize: Event<THREE.Vector2>;
    /**
     * The front offset of the minimap.
     * It determines how much the minimap's view is offset from the camera's view.
     * By pushing the map to the front, what the user sees on screen corresponds with what they see on the map
     */
    frontOffset: number;
    /**
     * The override material for the minimap.
     * It is used to render the depth information of the world onto the minimap.
     */
    overrideMaterial: THREE.MeshDepthMaterial;
    /**
     * The background color of the minimap.
     * It is used to set the background color of the minimap's renderer.
     */
    backgroundColor: THREE.Color;
    /**
     * The WebGL renderer for the minimap.
     * It is used to render the minimap onto the screen.
     */
    renderer: THREE.WebGLRenderer;
    /**
     * A flag indicating whether the minimap is enabled.
     * If disabled, the minimap will not update or render.
     */
    enabled: boolean;
    /**
     * The world in which the minimap is displayed.
     * It provides access to the 3D scene, camera, and other relevant world elements.
     */
    world: World;
    private _lockRotation;
    private _camera;
    private _plane;
    private _size;
    private _tempVector1;
    private _tempVector2;
    private _tempTarget;
    private readonly down;
    /**
     * Gets or sets whether the minimap rotation is locked.
     * When rotation is locked, the minimap will always face the same direction as the camera.
     */
    get lockRotation(): boolean;
    /**
     * Sets whether the minimap rotation is locked.
     * When rotation is locked, the minimap will always face the same direction as the camera.
     * @param active - If 'true', rotation is locked. If 'false', rotation is not locked.
     */
    set lockRotation(active: boolean);
    /**
     * Gets the current zoom level of the minimap.
     * The zoom level determines how much of the world is visible on the minimap.
     * @returns The current zoom level of the minimap.
     */
    get zoom(): number;
    /**
     * Sets the zoom level of the minimap.
     * The zoom level determines how much of the world is visible on the minimap.
     * @param value - The new zoom level of the minimap.
     */
    set zoom(value: number);
    constructor(world: World);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /** Returns the camera used by the MiniMap */
    get(): THREE.OrthographicCamera;
    /** {@link Updateable.update} */
    update(): void;
    /** {@link Resizeable.getSize} */
    getSize(): THREE.Vector2;
    /** {@link Resizeable.resize} */
    resize(size?: THREE.Vector2): void;
    private updatePlanes;
}
import { InverseAttribute } from "./types";
export declare const relToAttributesMap: Map<number, {
    forRelating: InverseAttribute;
    forRelated: InverseAttribute;
}>;
import * as WEBIFC from "web-ifc";
import { IfcItemsCategories } from "../../../ifc";
export declare class SpatialStructure {
    itemsByFloor: IfcItemsCategories;
    private _units;
    setUp(webIfc: WEBIFC.IfcAPI): void;
    cleanUp(): void;
}
import * as WEBIFC from "web-ifc";
/** Configuration of the IFC-fragment conversion. */
export declare class IfcFragmentSettings {
    /** Whether to extract the IFC properties into a JSON. */
    includeProperties: boolean;
    /**
     * Generate the geometry for categories that are not included by default,
     * like IFCSPACE.
     */
    optionalCategories: number[];
    /** Whether to use the coordination data coming from the IFC files. */
    coordinate: boolean;
    /** Path of the WASM for [web-ifc](https://github.com/ThatOpen/engine_web-ifc). */
    wasm: {
        path: string;
        absolute: boolean;
        logLevel?: WEBIFC.LogLevel;
    };
    /** List of categories that won't be converted to fragments. */
    excludedCategories: Set<number>;
    /** Whether to save the absolute location of all IFC items. */
    saveLocations: boolean;
    /** Loader settings for [web-ifc](https://github.com/ThatOpen/engine_web-ifc). */
    webIfc: WEBIFC.LoaderSettings;
    /**
     * Whether to automatically set the path to the WASM file for [web-ifc](https://github.com/ThatOpen/engine_web-ifc).
     * If set to true, the path will be set to the default path of the WASM file.
     * If set to false, the path must be provided manually in the 'wasm.path' property.
     * Default value is true.
     */
    autoSetWasm: boolean;
    /**
     * Custom function to handle the file location for [web-ifc](https://github.com/ThatOpen/engine_web-ifc).
     * This function will be called when [web-ifc](https://github.com/ThatOpen/engine_web-ifc) needs to locate a file.
     * If set to null, the default file location handler will be used.
     *
     * @param url - The URL of the file to locate.
     * @returns The absolute path of the file.
     */
    customLocateFileHandler: WEBIFC.LocateFileHandlerFn | null;
}
import * as WEBIFC from "web-ifc";
export interface IfcItemsCategories {
    [itemID: number]: number;
}
export declare class IfcCategories {
    getAll(webIfc: WEBIFC.IfcAPI, modelID: number): IfcItemsCategories;
}
/**
 * A map of IFC element types to their corresponding names. The keys are the IFC entity type numbers, and the values are the names of the IFC entities.
 *
 * @remarks
 * This map is used to provide a mapping between IFC entity type numbers and their names.
 * It is useful for identifying and processing different types of IFC elements in a project.
 *
 */
export declare const IfcElements: {
    [key: number]: string;
};
/**
 * A map that associates each unique integer identifier (IFC Entity ID) with its corresponding category name. This map is used to map IFC entities to their respective categories for easier identification and processing.
 */
export declare const IfcCategoryMap: {
    [key: number]: string;
};
import * as FRAGS from "@thatopen/fragments";
export declare class IfcPropertiesUtils {
    static getUnits(group: FRAGS.FragmentsGroup): Promise<number>;
    static findItemByGuid(model: FRAGS.FragmentsGroup, guid: string): Promise<{
        [attribute: string]: any;
    } | null>;
    static getRelationMap(model: FRAGS.FragmentsGroup, relationType: number, onElementsFound?: (relatingID: number, relatedIDs: number[]) => Promise<void>): Promise<{
        [relatingID: number]: number[];
    }>;
    static getQsetQuantities(model: FRAGS.FragmentsGroup, expressID: number, onQuantityFound?: (expressID: number) => void): Promise<number[] | null>;
    static getPsetProps(model: FRAGS.FragmentsGroup, expressID: number, onPropFound?: (expressID: number) => void): Promise<number[] | null>;
    static getPsetRel(model: FRAGS.FragmentsGroup, psetID: number): Promise<number | null>;
    static getQsetRel(model: FRAGS.FragmentsGroup, qsetID: number): Promise<number | null>;
    static getEntityName(model: FRAGS.FragmentsGroup, entityID: number): Promise<{
        key: string | null;
        name: string | null;
    }>;
    static getQuantityValue(model: FRAGS.FragmentsGroup, quantityID: number): Promise<{
        key: string | null;
        value: number | null;
    }>;
    static isRel(expressID: number): boolean;
    static attributeExists(model: FRAGS.FragmentsGroup, expressID: number, attribute: string): Promise<boolean>;
    static groupEntitiesByType(model: FRAGS.FragmentsGroup, expressIDs: Set<number> | number[]): Promise<Map<number, Set<number>>>;
}
/**
 * Simple event handler by [Jason Kleban](https://gist.github.com/JasonKleban/50cee44960c225ac1993c922563aa540). Keep in mind that if you want to remove it later, you might want to declare the callback as an object. If you want to maintain the reference to 'this', you will need to declare the callback as an arrow function.
 */
export declare class Event<T> {
    /**
     * Add a callback to this event instance.
     * @param handler - the callback to be added to this event.
     */
    add(handler: T extends void ? {
        (): void;
    } : {
        (data: T): void;
    }): void;
    /**
     * Removes a callback from this event instance.
     * @param handler - the callback to be removed from this event.
     */
    remove(handler: T extends void ? {
        (): void;
    } : {
        (data: T): void;
    }): void;
    /** Triggers all the callbacks assigned to this event. */
    trigger: (data?: T) => void;
    /** Gets rid of all the suscribed events. */
    reset(): void;
    private handlers;
}
/**
 * Simple event handler by [Jason Kleban](https://gist.github.com/JasonKleban/50cee44960c225ac1993c922563aa540). Keep in mind that if you want to remove it later, you might want to declare the callback as an object. If you want to maintain the reference to 'this', you will need to declare the callback as an arrow function.
 */
export declare class AsyncEvent<T> {
    /**
     * Add a callback to this event instance.
     * @param handler - the callback to be added to this event.
     */
    add(handler: T extends void ? {
        (): Promise<void>;
    } : {
        (data: T): Promise<void>;
    }): void;
    /**
     * Removes a callback from this event instance.
     * @param handler - the callback to be removed from this event.
     */
    remove(handler: T extends void ? {
        (): Promise<void>;
    } : {
        (data: T): Promise<void>;
    }): void;
    /** Triggers all the callbacks assigned to this event. */
    trigger: (data?: T) => Promise<void>;
    /** Gets rid of all the suscribed events. */
    reset(): void;
    private handlers;
}
import * as THREE from "three";
import CameraControls from "camera-controls";
import { Event } from "./event";
/**
 * Whether this component has to be manually destroyed once you are done with it to prevent [memory leaks](https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects). This also ensures that the DOM events created by that component will be cleaned up.
 */
export interface Disposable {
    /**
     * Destroys the object from memory to prevent a
     * [memory leak](https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects).
     */
    dispose: () => void | Promise<void>;
    /** Fired after the tool has been disposed.  */
    readonly onDisposed: Event<any>;
}
/**
 * Whether the geometric representation of this component can be hidden or shown in the [Three.js scene](https://threejs.org/docs/#api/en/scenes/Scene).
 */
export interface Hideable {
    /**
     * Whether the geometric representation of this component is
     * currently visible or not in the
     * [Three.js scene](https://threejs.org/docs/#api/en/scenes/Scene).
     */
    visible: boolean;
}
/**
 * Whether this component can be resized. The meaning of this can vary depending on the component: resizing a [Renderer](https://threejs.org/docs/#api/en/renderers/WebGLRenderer) component could mean changing its resolution, whereas resizing a [Mesh](https://threejs.org/docs/#api/en/objects/Mesh) would change its scale.
 */
export interface Resizeable {
    /**
     * Sets size of this component (e.g. the resolution of a
     * [Renderer](https://threejs.org/docs/#api/en/renderers/WebGLRenderer)
     * component.
     */
    resize: (size?: THREE.Vector2) => void;
    /** Event that fires when the component has been resized. */
    onResize: Event<THREE.Vector2>;
    /**
     * Gets the current size of this component (e.g. the resolution of a
     * [Renderer](https://threejs.org/docs/#api/en/renderers/WebGLRenderer)
     * component.
     */
    getSize: () => THREE.Vector2;
}
/** Whether this component should be updated each frame. */
export interface Updateable {
    /** Actions that should be executed after updating the component. */
    onAfterUpdate: Event<any>;
    /** Actions that should be executed before updating the component. */
    onBeforeUpdate: Event<any>;
    /**
     * Function used to update the state of this component each frame. For
     * instance, a renderer component will make a render each frame.
     */
    update(delta?: number): void;
}
/** Basic type to describe the progress of any kind of process. */
export interface Progress {
    /** The amount of things that have been done already. */
    current: number;
    /** The total amount of things to be done by the process. */
    total: number;
}
/**
 * Whether this component supports create and destroy operations. This generally applies for components that work with instances, such as clipping planes or dimensions.
 */
export interface Createable {
    /** Creates a new instance of an element (e.g. a new Dimension). */
    create: (data: any) => void;
    /**
     * Finish the creation process of the component, successfully creating an
     * instance of whatever the component creates.
     */
    endCreation?: (data: any) => void;
    /**
     * Cancels the creation process of the component, going back to the state
     * before starting to create.
     */
    cancelCreation?: (data: any) => void;
    /** Deletes an existing instance of an element (e.g. a Dimension). */
    delete: (data: any) => void;
}
/**
 * Whether this component supports to be configured.
 */
export interface Configurable<T extends Record<string, any>> {
    /** Wether this components has been already configured. */
    isSetup: boolean;
    /** Use the provided configuration to setup the tool. */
    setup: (config?: Partial<T>) => void | Promise<void>;
    /** Fired after successfully calling {@link Configurable.setup()}  */
    readonly onSetup: Event<any>;
    /** Object holding the tool configuration. Is not meant to be edited directly, if you need
     * to make changes to this object, use {@link Configurable.setup()} just after the tool is instantiated.
     */
    config: Required<T>;
}
/**
 * Whether a camera uses the Camera Controls library.
 */
export interface CameraControllable {
    /**
     * An instance of CameraControls that provides camera control functionalities.
     * This instance is used to manipulate the camera.
     */
    controls: CameraControls;
}
import { Base } from "./base";
/**
 * Components are the building blocks of this library. Components are singleton elements that contain specific functionality. For instance, the Clipper Component can create, delete and handle 3D clipping planes. Components must be unique (they can't be instanced more than once per Components instance), and have a static UUID that identifies them uniquely. The can be accessed globally using the {@link Components} instance.
 */
export declare abstract class Component extends Base {
    /**
     * Whether this component is active or not. The behaviour can vary depending
     * on the type of component. E.g. a disabled dimension tool will stop creating
     * dimensions, while a disabled camera will stop moving. A disabled component
     * will not be updated automatically each frame.
     */
    abstract enabled: boolean;
}
import { Disposable, Hideable, Resizeable, Updateable, Configurable } from "./interfaces";
import { Components } from "../../Components";
/**
 * Base class of the library. Useful for finding out the interfaces something implements.
 */
export declare abstract class Base {
    components: Components;
    constructor(components: Components);
    /** Whether is component is {@link Disposable}. */
    isDisposeable: () => this is Disposable;
    /** Whether is component is {@link Resizeable}. */
    isResizeable: () => this is Resizeable;
    /** Whether is component is {@link Updateable}. */
    isUpdateable: () => this is Updateable;
    /** Whether is component is {@link Hideable}. */
    isHideable: () => this is Hideable;
    /** Whether is component is {@link Configurable}. */
    isConfigurable: () => this is Configurable<any>;
}
import { Base } from "./base";
import { World } from "./world";
import { Event } from "./event";
import { Components } from "../../Components";
/**
 * One of the elements that make a world. It can be either a scene, a camera or a renderer.
 */
export declare abstract class BaseWorldItem extends Base {
    readonly worlds: Map<string, World>;
    /**
     * Event that is triggered when a world is added or removed from the 'worlds' map.
     * The event payload contains the world instance and the action ("added" or "removed").
     */
    readonly onWorldChanged: Event<{
        world: World;
        action: "added" | "removed";
    }>;
    /**
     * The current world this item is associated with. It can be null if no world is currently active.
     */
    currentWorld: World | null;
    protected constructor(components: Components);
}
import * as THREE from "three";
import CameraControls from "camera-controls";
import { BaseWorldItem } from "./base-world-item";
import { CameraControllable } from "./interfaces";
/**
 * Abstract class representing a camera in a 3D world. All cameras should use this class as a base.
 */
export declare abstract class BaseCamera extends BaseWorldItem {
    /**
     * Whether the camera is enabled or not.
     */
    abstract enabled: boolean;
    /**
     * The Three.js camera instance.
     */
    abstract three: THREE.Camera;
    /**
     * Optional CameraControls instance for controlling the camera.
     * This property is only available if the camera is controllable.
     */
    abstract controls?: CameraControls;
    /**
     * Checks whether the instance is {@link CameraControllable}.
     *
     * @returns True if the instance is controllable, false otherwise.
     */
    hasCameraControls: () => this is CameraControllable;
}
import * as THREE from "three";
import { Vector2 } from "three";
import { Event } from "./event";
import { BaseWorldItem } from "./base-world-item";
import { Disposable, Resizeable, Updateable } from "./interfaces";
/**
 * Abstract class representing a renderer for a 3D world. All renderers should use this class as a base.
 */
export declare abstract class BaseRenderer extends BaseWorldItem implements Updateable, Disposable, Resizeable {
    /**
     * The three.js WebGLRenderer instance associated with this renderer.
     *
     * @abstract
     * @type {THREE.WebGLRenderer}
     */
    abstract three: THREE.WebGLRenderer;
    /** {@link Updateable.onBeforeUpdate} */
    onAfterUpdate: Event<unknown>;
    /** {@link Updateable.onAfterUpdate} */
    onBeforeUpdate: Event<unknown>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<undefined>;
    /** {@link Resizeable.onResize} */
    readonly onResize: Event<THREE.Vector2>;
    /**
     * Event that fires when there has been a change to the list of clipping
     * planes used by the active renderer.
     */
    readonly onClippingPlanesUpdated: Event<unknown>;
    /** {@link Updateable.update} */
    abstract update(delta?: number): void | Promise<void>;
    /** {@link Disposable.dispose} */
    abstract dispose(): void;
    /** {@link Resizeable.getSize} */
    abstract getSize(): Vector2;
    /** {@link Resizeable.resize} */
    abstract resize(size: Vector2 | undefined): void;
    /**
     * The list of [clipping planes](https://threejs.org/docs/#api/en/renderers/WebGLRenderer.clippingPlanes) used by this instance of the renderer.
     */
    clippingPlanes: THREE.Plane[];
    /**
     * Updates the clipping planes and triggers the 'onClippingPlanesUpdated' event.
     *
     * @remarks
     * This method is typically called when there is a change to the list of clipping planes
     * used by the active renderer.
     */
    updateClippingPlanes(): void;
    /**
     * Sets or removes a clipping plane from the renderer.
     *
     * @param active - A boolean indicating whether the clipping plane should be active or not.
     * @param plane - The clipping plane to be added or removed.
     * @param isLocal - An optional boolean indicating whether the clipping plane is local to the object. If not provided, it defaults to 'false'.
     *
     * @remarks
     * This method adds or removes a clipping plane from the 'clippingPlanes' array.
     * If 'active' is 'true' and the plane is not already in the array, it is added.
     * If 'active' is 'false' and the plane is in the array, it is removed.
     * The 'three.clippingPlanes' property is then updated to reflect the current state of the 'clippingPlanes' array,
     * excluding any planes marked as local.
     */
    setPlane(active: boolean, plane: THREE.Plane, isLocal?: boolean): void;
}
import * as THREE from "three";
import { Disposable } from "./interfaces";
import { Event } from "./event";
import { Components } from "../../Components";
import { BaseWorldItem } from "./base-world-item";
/**
 * Abstract class representing a base scene in the application. All scenes should use this class as a base.
 */
export declare abstract class BaseScene extends BaseWorldItem implements Disposable {
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /**
     * Abstract property representing the three.js object associated with this scene.
     * It should be implemented by subclasses.
     */
    abstract three: THREE.Object3D;
    protected constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
}
import * as THREE from "three";
import { BaseScene } from "./base-scene";
import { BaseCamera } from "./base-camera";
import { BaseRenderer } from "./base-renderer";
import { Updateable, Disposable } from "./interfaces";
/**
 * Represents a 3D world with meshes, scene, camera, renderer, and other properties.
 */
export interface World extends Disposable, Updateable {
    /**
     * A set of meshes present in the world. This is taken into account for operations like raycasting.
     */
    meshes: Set<THREE.Mesh>;
    /**
     * The base scene of the world.
     */
    scene: BaseScene;
    /**
     * The base camera of the world.
     */
    camera: BaseCamera;
    /**
     * The base renderer of the world. Can be null if this world doesn't use a renderer (e.g. in a backend environment).
     */
    renderer: BaseRenderer | null;
    /**
     * A unique identifier for the world.
     */
    uuid: string;
    /**
     * Indicates whether the world is currently disposing. This is useful for cancelling logic that access the elements of a world (which are also disposed).
     */
    isDisposing: boolean;
}
import * as THREE from "three";
import { Disposable, Event } from "../../Types";
/**
 * A helper to easily get the real position of the mouse in the Three.js canvas to work with tools like the [raycaster](https://threejs.org/docs/#api/en/core/Raycaster), even if it has been transformed through CSS or doesn't occupy the whole screen.
 */
export declare class Mouse implements Disposable {
    dom: HTMLCanvasElement;
    private _event?;
    private _position;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    constructor(dom: HTMLCanvasElement);
    /**
     * The real position of the mouse of the Three.js canvas.
     */
    get position(): THREE.Vector2;
    /** {@link Disposable.dispose} */
    dispose(): void;
    private getPositionY;
    private getPositionX;
    private updateMouseInfo;
    private setupEvents;
}
import * as THREE from "three";
import { Components } from "../../Components";
import { Event, World, Disposable } from "../../Types";
import { Mouse } from "./mouse";
/**
 * A simple [raycaster](https://threejs.org/docs/#api/en/core/Raycaster) that allows to easily get items from the scene using the mouse and touch events.
 */
export declare class SimpleRaycaster implements Disposable {
    /** {@link Component.enabled} */
    enabled: boolean;
    /** The components instance to which this Raycaster belongs. */
    components: Components;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /** The position of the mouse in the screen. */
    readonly mouse: Mouse;
    /**
     * A reference to the Three.js Raycaster instance.
     * This is used for raycasting operations.
     */
    readonly three: THREE.Raycaster;
    /**
     * A reference to the world instance to which this Raycaster belongs.
     * This is used to access the camera and meshes.
     */
    world: World;
    constructor(components: Components, world: World);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Throws a ray from the camera to the mouse or touch event point and returns
     * the first item found. This also takes into account the clipping planes
     * used by the renderer.
     *
     * @param items - the [meshes](https://threejs.org/docs/#api/en/objects/Mesh)
     * to query. If not provided, it will query all the meshes stored in
     * {@link Components.meshes}.
     */
    castRay(items?: THREE.Object3D[]): THREE.Intersection | null;
    /**
     * Casts a ray from a given origin in a given direction and returns the first item found.
     * This method also takes into account the clipping planes used by the renderer.
     *
     * @param origin - The origin of the ray.
     * @param direction - The direction of the ray.
     * @param items - The meshes to query. If not provided, it will query all the meshes stored in {@link World.meshes}.
     * @returns The first intersection found or 'null' if no intersection was found.
     */
    castRayFromVector(origin: THREE.Vector3, direction: THREE.Vector3, items?: THREE.Mesh<THREE.BufferGeometry<THREE.NormalBufferAttributes>, THREE.Material | THREE.Material[], THREE.Object3DEventMap>[]): THREE.Intersection<THREE.Object3D<THREE.Object3DEventMap>> | null;
    private intersect;
    private filterClippingPlanes;
}
import * as THREE from "three";
import { BaseScene, Configurable, Event } from "../../Types";
import { Components } from "../../Components";
/**
 * Configuration interface for the {@link SimpleScene}. Defines properties for directional and ambient lights.
 */
export interface SimpleSceneConfig {
    directionalLight: {
        color: THREE.Color;
        intensity: number;
        position: THREE.Vector3;
    };
    ambientLight: {
        color: THREE.Color;
        intensity: number;
    };
}
/**
 * A basic 3D [scene](https://threejs.org/docs/#api/en/scenes/Scene) to add objects hierarchically, and easily dispose them when you are finished with it.
 */
export declare class SimpleScene extends BaseScene implements Configurable<{}> {
    /** {@link Configurable.isSetup} */
    isSetup: boolean;
    /**
     * The underlying Three.js scene object.
     * It is used to define the 3D space containing objects, lights, and cameras.
     */
    three: THREE.Scene;
    /** {@link Configurable.onSetup} */
    readonly onSetup: Event<SimpleScene>;
    /**
     * Configuration interface for the {@link SimpleScene}.
     * Defines properties for directional and ambient lights.
     */
    config: Required<SimpleSceneConfig>;
    constructor(components: Components);
    /** {@link Configurable.setup} */
    setup(config?: Partial<SimpleSceneConfig>): void;
}
import * as THREE from "three";
import { BaseRenderer, Event } from "../../Types";
import { Components } from "../../Components";
/**
 * A basic renderer capable of rendering [Objec3Ds](https://threejs.org/docs/#api/en/core/Object3D).
 */
export declare class SimpleRenderer extends BaseRenderer {
    /**
     * Indicates whether the renderer is enabled. If it's not, it won't be updated.
     * Default is 'true'.
     */
    enabled: boolean;
    /**
     * The HTML container of the THREE.js canvas where the scene is rendered.
     */
    container: HTMLElement;
    /**
     * The THREE.js WebGLRenderer instance.
     */
    three: THREE.WebGLRenderer;
    protected _canvas: HTMLCanvasElement;
    protected _parameters?: Partial<THREE.WebGLRendererParameters>;
    protected _resizeObserver: ResizeObserver | null;
    protected onContainerUpdated: Event<unknown>;
    private _resizing;
    /**
     * Constructor for the SimpleRenderer class.
     *
     * @param components - The components instance.
     * @param container - The HTML container where the THREE.js canvas will be rendered.
     * @param parameters - Optional parameters for the THREE.js WebGLRenderer.
     */
    constructor(components: Components, container: HTMLElement, parameters?: Partial<THREE.WebGLRendererParameters>);
    /** {@link Updateable.update} */
    update(): void;
    /** {@link Disposable.dispose} */
    dispose(): void;
    /** {@link Resizeable.getSize}. */
    getSize(): THREE.Vector2;
    /** {@link Resizeable.resize} */
    resize: (size?: THREE.Vector2) => void;
    /**
     * Sets up and manages the event listeners for the renderer.
     *
     * @param active - A boolean indicating whether to activate or deactivate the event listeners.
     *
     * @throws Will throw an error if the renderer does not have an HTML container.
     */
    setupEvents(active: boolean): void;
    private resizeEvent;
    private setupRenderer;
    private onContextLost;
    private onContextBack;
}
import * as THREE from "three";
import { Event, Base, World, BaseScene, BaseCamera, BaseRenderer, Disposable, Updateable } from "../../Types";
/**
 * A class representing a simple world in a 3D environment. It extends the Base class and implements the World interface.
 *
 * @template T - The type of the scene. Default is BaseScene.
 * @template U - The type of the camera. Default is BaseCamera.
 * @template S - The type of the renderer. Default is BaseRenderer.
 */
export declare class SimpleWorld<T extends BaseScene = BaseScene, U extends BaseCamera = BaseCamera, S extends BaseRenderer = BaseRenderer> extends Base implements World, Disposable, Updateable {
    /**
     * All the loaded [meshes](https://threejs.org/docs/#api/en/objects/Mesh). These meshes will be taken into account in operations like raycasting.
     */
    readonly meshes: Set<THREE.Mesh<THREE.BufferGeometry<THREE.NormalBufferAttributes>, THREE.Material | THREE.Material[], THREE.Object3DEventMap>>;
    /** {@link Updateable.onAfterUpdate} */
    readonly onAfterUpdate: Event<unknown>;
    /** {@link Updateable.onBeforeUpdate} */
    readonly onBeforeUpdate: Event<unknown>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /**
     * Indicates whether the world is currently being disposed. This is useful to prevent trying to access world's elements when it's being disposed, which could cause errors when you dispose a world.
     */
    isDisposing: boolean;
    /**
     * Indicates whether the world is currently enabled.
     * When disabled, the world will not be updated.
     */
    enabled: boolean;
    /**
     * A unique identifier for the world.
     */
    uuid: string;
    /**
     * An optional name for the world.
     */
    name?: string;
    private _scene?;
    private _camera?;
    private _renderer;
    /**
     * Getter for the scene. If no scene is initialized, it throws an error.
     * @returns The current scene.
     */
    get scene(): T;
    /**
     * Setter for the scene. It sets the current scene, adds the world to the scene's worlds set,
     * sets the current world in the scene, and triggers the scene's onWorldChanged event with the added action.
     * @param scene - The new scene to be set.
     */
    set scene(scene: T);
    /**
     * Getter for the camera. If no camera is initialized, it throws an error.
     * @returns The current camera.
     */
    get camera(): U;
    /**
     * Setter for the camera. It sets the current camera, adds the world to the camera's worlds set,
     * sets the current world in the camera, and triggers the camera's onWorldChanged event with the added action.
     * @param camera - The new camera to be set.
     */
    set camera(camera: U);
    /**
     * Getter for the renderer.
     * @returns The current renderer or null if no renderer is set. Some worlds don't need a renderer to work (when your mail goal is not to display a 3D viewport to the user).
     */
    get renderer(): S | null;
    /**
     * Setter for the renderer. It sets the current renderer, adds the world to the renderer's worlds set,
     * sets the current world in the renderer, and triggers the renderer's onWorldChanged event with the added action.
     * If a new renderer is set, it also triggers the onWorldChanged event with the removed action for the old renderer.
     * @param renderer - The new renderer to be set or null to remove the current renderer.
     */
    set renderer(renderer: S | null);
    /** {@link Updateable.update} */
    update(delta?: number): void;
    /** {@link Disposable.dispose} */
    dispose(disposeResources?: boolean): void;
}
import * as THREE from "three";
import { Hideable, Event, World, Disposable } from "../../Types";
import { Components } from "../../Components";
/**
 * Configuration interface for the {@link SimpleGrid} class.
 */
export interface GridConfig {
    /**
     * The color of the grid lines.
     */
    color: THREE.Color;
    /**
     * The size of the primary grid lines.
     */
    size1: number;
    /**
     * The size of the secondary grid lines.
     */
    size2: number;
    /**
     * The distance at which the grid lines start to fade away.
     */
    distance: number;
}
/**
 * An infinite grid. Created by [fyrestar](https://github.com/Fyrestar/THREE.InfiniteGridHelper) and translated to typescript by [dkaraush](https://github.com/dkaraush/THREE.InfiniteGridHelper/blob/master/InfiniteGridHelper.ts).
 */
export declare class SimpleGrid implements Hideable, Disposable {
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /** The world instance to which this Raycaster belongs. */
    world: World;
    /** The components instance to which this grid belongs. */
    components: Components;
    /** {@link Hideable.visible} */
    get visible(): boolean;
    /** {@link Hideable.visible} */
    set visible(visible: boolean);
    /** The material of the grid. */
    get material(): THREE.ShaderMaterial;
    /**
     * Whether the grid should fade away with distance. Recommended to be true for
     * perspective cameras and false for orthographic cameras.
     */
    get fade(): boolean;
    /**
     * Whether the grid should fade away with distance. Recommended to be true for
     * perspective cameras and false for orthographic cameras.
     */
    set fade(active: boolean);
    /** The Three.js mesh that contains the infinite grid. */
    readonly three: THREE.Mesh;
    private _fade;
    constructor(components: Components, world: World, config: GridConfig);
    /** {@link Disposable.dispose} */
    dispose(): void;
    private setupEvents;
    private updateZoom;
}
import * as THREE from "three";
import { Components } from "../../Components";
import { AsyncEvent, Event, World } from "../../Types";
/**
 * Settings to configure the CullerRenderer.
 */
export interface CullerRendererSettings {
    /**
     * Interval in milliseconds at which the visibility check should be performed.
     * Default value is 1000.
     */
    updateInterval?: number;
    /**
     * Width of the render target used for visibility checks.
     * Default value is 512.
     */
    width?: number;
    /**
     * Height of the render target used for visibility checks.
     * Default value is 512.
     */
    height?: number;
    /**
     * Whether the visibility check should be performed automatically.
     * Default value is true.
     */
    autoUpdate?: boolean;
}
/**
 * A base renderer to determine visibility on screen.
 */
export declare class CullerRenderer {
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<string>;
    /**
     * Fires after making the visibility check to the meshes. It lists the
     * meshes that are currently visible, and the ones that were visible
     * just before but not anymore.
     */
    readonly onViewUpdated: Event<any> | AsyncEvent<any>;
    /**
     * Whether this renderer is active or not. If not, it won't render anything.
     */
    enabled: boolean;
    /**
     * Needs to check whether there are objects that need to be hidden or shown.
     * You can bind this to the camera movement, to a certain interval, etc.
     */
    needsUpdate: boolean;
    /**
     * Render the internal scene used to determine the object visibility. Used
     * for debugging purposes.
     */
    renderDebugFrame: boolean;
    /** The components instance to which this renderer belongs. */
    components: Components;
    /** The world instance to which this renderer belongs. */
    readonly world: World;
    /** The THREE.js renderer used to make the visibility test. */
    readonly renderer: THREE.WebGLRenderer;
    protected autoUpdate: boolean;
    protected updateInterval: number;
    protected readonly worker: Worker;
    protected readonly scene: THREE.Scene;
    private _width;
    private _height;
    private _availableColor;
    private readonly renderTarget;
    private readonly bufferSize;
    private readonly _buffer;
    protected _isWorkerBusy: boolean;
    constructor(components: Components, world: World, settings?: CullerRendererSettings);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * The function that the culler uses to reprocess the scene. Generally it's
     * better to call needsUpdate, but you can also call this to force it.
     * @param force if true, it will refresh the scene even if needsUpdate is
     * not true.
     */
    updateVisibility: (force?: boolean) => Promise<void>;
    protected getAvailableColor(): {
        r: number;
        g: number;
        b: number;
        code: string;
    };
    protected increaseColor(): void;
    protected decreaseColor(): void;
    private applySettings;
}
import * as THREE from "three";
import CameraControls from "camera-controls";
import { Disposable, Updateable, Event, BaseCamera } from "../../Types";
import { Components } from "../../Components";
/**
 * A basic camera that uses [yomotsu's cameracontrols](https://github.com/yomotsu/camera-controls) to control the camera in 2D and 3D. Check out it's API to find out what features it offers.
 */
export declare class SimpleCamera extends BaseCamera implements Updateable, Disposable {
    /** {@link Updateable.onBeforeUpdate} */
    readonly onBeforeUpdate: Event<SimpleCamera>;
    /** {@link Updateable.onAfterUpdate} */
    readonly onAfterUpdate: Event<SimpleCamera>;
    /**
     * Event that is triggered when the aspect of the camera has been updated.
     * This event is useful when you need to perform actions after the aspect of the camera has been changed.
     */
    readonly onAspectUpdated: Event<unknown>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<string>;
    /**
     * A three.js PerspectiveCamera or OrthographicCamera instance.
     * This camera is used for rendering the scene.
     */
    three: THREE.PerspectiveCamera | THREE.OrthographicCamera;
    private _allControls;
    /**
     * The object that controls the camera. An instance of
     * [yomotsu's cameracontrols](https://github.com/yomotsu/camera-controls).
     * Transforming the camera directly will have no effect: you need to use this
     * object to move, rotate, look at objects, etc.
     */
    get controls(): CameraControls;
    /**
     * Getter for the enabled state of the camera controls.
     * If the current world is null, it returns false.
     * Otherwise, it returns the enabled state of the camera controls.
     *
     * @returns {boolean} The enabled state of the camera controls.
     */
    get enabled(): boolean;
    /**
     * Setter for the enabled state of the camera controls.
     * If the current world is not null, it sets the enabled state of the camera controls to the provided value.
     *
     * @param {boolean} enabled - The new enabled state of the camera controls.
     */
    set enabled(enabled: boolean);
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /** {@link Updateable.update} */
    update(_delta: number): void;
    /**
     * Updates the aspect of the camera to match the size of the
     * {@link Components.renderer}.
     */
    updateAspect: () => void;
    private setupCamera;
    private newCameraControls;
    private setupEvents;
    private static getSubsetOfThree;
}
import * as THREE from "three";
import { CullerRenderer, CullerRendererSettings } from "./culler-renderer";
import { Components } from "../../Components";
import { Event, World, Disposable } from "../../Types";
/**
 * A renderer to hide/show meshes depending on their visibility from the user's point of view.
 */
export declare class MeshCullerRenderer extends CullerRenderer implements Disposable {
    /**
     * Event triggered when the visibility of meshes is updated.
     * Contains two sets: seen and unseen.
     */
    readonly onViewUpdated: Event<{
        seen: Set<THREE.Mesh>;
        unseen: Set<THREE.Mesh>;
    }>;
    /**
     * Pixels in screen a geometry must occupy to be considered "seen".
     * Default value is 100.
     */
    threshold: number;
    /**
     * Map of color code to THREE.InstancedMesh.
     * Used to keep track of color-coded meshes.
     */
    colorMeshes: Map<string, THREE.InstancedMesh<THREE.BufferGeometry<THREE.NormalBufferAttributes>, THREE.Material | THREE.Material[]>>;
    /**
     * Flag to indicate if the renderer is currently processing.
     * Used to prevent concurrent processing.
     */
    isProcessing: boolean;
    private _colorCodeMeshMap;
    private _meshIDColorCodeMap;
    private _currentVisibleMeshes;
    private _recentlyHiddenMeshes;
    private _intervalID;
    private readonly _transparentMat;
    constructor(components: Components, world: World, settings?: CullerRendererSettings);
    /** {@link Disposable.dispose} */
    dispose(): void;
    /**
     * Adds a mesh to the culler. When the mesh is not visibile anymore, it will be removed from the scene. When it's visible again, it will be added to the scene.
     * @param mesh - The mesh to add. It can be a regular THREE.Mesh or an instance of THREE.InstancedMesh.
     * @returns {void}
     */
    add(mesh: THREE.Mesh | THREE.InstancedMesh): void;
    /**
     * Removes a mesh from the culler, so its visibility is not controlled by the culler anymore.
     * When the mesh is removed, it will be hidden from the scene and its color-coded mesh will be destroyed.
     * @param mesh - The mesh to remove. It can be a regular THREE.Mesh or an instance of THREE.InstancedMesh.
     * @returns {void}
     */
    remove(mesh: THREE.Mesh | THREE.InstancedMesh): void;
    private handleWorkerMessage;
    private getAvailableMaterial;
}
export declare function readPixelsAsync(gl: WebGL2RenderingContext, x: number, y: number, w: number, h: number, format: any, type: any, dest: ArrayBufferView): Promise<ArrayBufferView>;
import * as THREE from "three";
import { Hideable, Disposable, Event, World } from "../../Types";
import { Components } from "../../Components";
/**
 * Each of the clipping planes created by the clipper.
 */
export declare class SimplePlane implements Disposable, Hideable {
    /** Event that fires when the user starts dragging a clipping plane. */
    readonly onDraggingStarted: Event<unknown>;
    /** Event that fires when the user stops dragging a clipping plane. */
    readonly onDraggingEnded: Event<unknown>;
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /**
     * The normal vector of the clipping plane.
     */
    readonly normal: THREE.Vector3;
    /**
     * The origin point of the clipping plane.
     */
    readonly origin: THREE.Vector3;
    /**
     * The THREE.js Plane object representing the clipping plane.
     */
    readonly three: THREE.Plane;
    /** The components instance to which this plane belongs. */
    components: Components;
    /** The world instance to which this plane belongs. */
    world: World;
    protected readonly _helper: THREE.Object3D;
    protected _visible: boolean;
    protected _enabled: boolean;
    private _controlsActive;
    private readonly _arrowBoundBox;
    private readonly _planeMesh;
    private readonly _controls;
    private readonly _hiddenMaterial;
    /**
     * Getter for the enabled state of the clipping plane.
     * @returns {boolean} The current enabled state.
     */
    get enabled(): boolean;
    /**
     * Setter for the enabled state of the clipping plane.
     * Updates the clipping plane state in the renderer and throws an error if no renderer is found.
     * @param {boolean} state - The new enabled state.
     */
    set enabled(state: boolean);
    /** {@link Hideable.visible } */
    get visible(): boolean;
    /** {@link Hideable.visible } */
    set visible(state: boolean);
    /** The meshes used for raycasting */
    get meshes(): THREE.Mesh[];
    /** The material of the clipping plane representation. */
    get planeMaterial(): THREE.Material | THREE.Material[];
    /** The material of the clipping plane representation. */
    set planeMaterial(material: THREE.Material | THREE.Material[]);
    /** The size of the clipping plane representation. */
    get size(): number;
    /** Sets the size of the clipping plane representation. */
    set size(size: number);
    /**
     * Getter for the helper object of the clipping plane.
     * The helper object is a THREE.Object3D that contains the clipping plane mesh and other related objects.
     * It is used for positioning, rotating, and scaling the clipping plane in the 3D scene.
     *
     * @returns {THREE.Object3D} The helper object of the clipping plane.
     */
    get helper(): THREE.Object3D<THREE.Object3DEventMap>;
    constructor(components: Components, world: World, origin: THREE.Vector3, normal: THREE.Vector3, material: THREE.Material, size?: number, activateControls?: boolean);
    /**
     * Sets the clipping plane's normal and origin from the given normal and point.
     * This method resets the clipping plane's state, updates the normal and origin,
     * and positions the helper object accordingly.
     *
     * @param normal - The new normal vector for the clipping plane.
     * @param point - The new origin point for the clipping plane.
     *
     * @returns {void}
     */
    setFromNormalAndCoplanarPoint(normal: THREE.Vector3, point: THREE.Vector3): void;
    /** {@link Updateable.update} */
    update: () => void;
    /** {@link Disposable.dispose} */
    dispose(): void;
    private reset;
    protected toggleControls(state: boolean): void;
    private newTransformControls;
    private initializeControls;
    private createArrowBoundingBox;
    private changeDrag;
    private notifyDraggingChanged;
    private preventCameraMovement;
    private newHelper;
    private static newPlaneMesh;
}
import { IfcFragmentSettings } from "../../IfcLoader/src";
/**
 * Settings for streaming properties. Extends {@link IfcFragmentSettings} to inherit common settings.
 */
export declare class PropertiesStreamingSettings extends IfcFragmentSettings {
    /**
     * Amount of properties to be streamed.
     * Defaults to 100 properties.
     */
    propertiesSize: number;
}
import { NavigationMode } from "./types";
import { OrthoPerspectiveCamera } from "../index";
/**
 * A {@link NavigationMode} that allows first person navigation, simulating FPS video games.
 */
export declare class FirstPersonMode implements NavigationMode {
    private camera;
    /** {@link NavigationMode.enabled} */
    enabled: boolean;
    /** {@link NavigationMode.id} */
    readonly id = "FirstPerson";
    constructor(camera: OrthoPerspectiveCamera);
    /** {@link NavigationMode.set} */
    set(active: boolean): void;
    private setupFirstPersonCamera;
}
import { NavigationMode } from "./types";
import { OrthoPerspectiveCamera } from "../index";
/**
 * A {@link NavigationMode} that allows 3D navigation and panning like in many 3D and CAD softwares.
 */
export declare class OrbitMode implements NavigationMode {
    camera: OrthoPerspectiveCamera;
    /** {@link NavigationMode.enabled} */
    enabled: boolean;
    /** {@link NavigationMode.id} */
    readonly id = "Orbit";
    constructor(camera: OrthoPerspectiveCamera);
    /** {@link NavigationMode.set} */
    set(active: boolean): void;
    private activateOrbitControls;
}
import { NavigationMode } from "./types";
import { OrthoPerspectiveCamera } from "../index";
/**
 * A {@link NavigationMode} that allows to navigate floorplans in 2D, like many BIM tools.
 */
export declare class PlanMode implements NavigationMode {
    private camera;
    /** {@link NavigationMode.enabled} */
    enabled: boolean;
    /** {@link NavigationMode.id} */
    readonly id = "Plan";
    private mouseAction1?;
    private mouseAction2?;
    private mouseInitialized;
    private readonly defaultAzimuthSpeed;
    private readonly defaultPolarSpeed;
    constructor(camera: OrthoPerspectiveCamera);
    /** {@link NavigationMode.set} */
    set(active: boolean): void;
}
import * as THREE from "three";
import { CameraProjection } from "./types";
import { Event } from "../../Types";
import { OrthoPerspectiveCamera } from "../index";
/**
 * Object to control the {@link CameraProjection} of the {@link OrthoPerspectiveCamera}.
 */
export declare class ProjectionManager {
    /**
     * Event that fires when the {@link CameraProjection} changes.
     */
    readonly onChanged: Event<THREE.PerspectiveCamera | THREE.OrthographicCamera>;
    /**
     * Current projection mode of the camera.
     * Default is "Perspective".
     */
    current: CameraProjection;
    /**
     * The camera controlled by this ProjectionManager.
     * It can be either a PerspectiveCamera or an OrthographicCamera.
     */
    camera: THREE.PerspectiveCamera | THREE.OrthographicCamera;
    /** Match Ortho zoom with Perspective distance when changing projection mode */
    matchOrthoDistanceEnabled: boolean;
    private _component;
    private _previousDistance;
    constructor(camera: OrthoPerspectiveCamera);
    /**
     * Sets the {@link CameraProjection} of the {@link OrthoPerspectiveCamera}.
     *
     * @param projection - the new projection to set. If it is the current projection,
     * it will have no effect.
     */
    set(projection: CameraProjection): Promise<void>;
    /**
     * Changes the current {@link CameraProjection} from Ortographic to Perspective
     * and vice versa.
     */
    toggle(): Promise<void>;
    private setOrthoCamera;
    private getPerspectiveDims;
    private setupOrthoCamera;
    private getDistance;
    private setPerspectiveCamera;
}
/**
 * The projection system of the camera.
 */
export type CameraProjection = "Perspective" | "Orthographic";
/**
 * The extensible list of supported navigation modes.
 */
export type NavModeID = "Orbit" | "FirstPerson" | "Plan";
/**
 * An object that determines the behavior of the camera controls and the user input (e.g. 2D floor plan mode, first person mode, etc).
 */
export interface NavigationMode {
    /** The unique ID of this navigation mode. */
    id: NavModeID;
    /**
     * Enable or disable this navigation mode.
     * When a new navigation mode is enabled, the previous navigation mode
     * must be disabled.
     *
     * @param active - whether to enable or disable this mode.
     * @param options - any additional data required to enable or disable it.
     * */
    set: (active: boolean, options?: any) => void;
    /** Whether this navigation mode is active or not. */
    enabled: boolean;
}
import * as WEBIFC from "web-ifc";
export declare class IfcMetadataReader {
    getNameInfo(webIfc: WEBIFC.IfcAPI): Record<string, any>;
    getDescriptionInfo(webIfc: WEBIFC.IfcAPI): Record<string, any>;
}
import * as THREE from "three";
import * as WEBIFC from "web-ifc";
import * as FRAGS from "@thatopen/fragments";
export declare class CivilReader {
    defLineMat: THREE.LineBasicMaterial;
    read(webIfc: WEBIFC.IfcAPI): {
        alignments: Map<number, FRAGS.Alignment>;
        coordinationMatrix: THREE.Matrix4;
    } | undefined;
    get(civilItems: any): {
        alignments: Map<number, FRAGS.Alignment>;
        coordinationMatrix: THREE.Matrix4;
    } | undefined;
    private getCurves;
}
/**
 * A dictionary of geometries streamed from a server. Each geometry is identified by a unique number (id), and contains information about its bounding box, whether it has holes, and an optional file path for the geometry data.
 */
export interface StreamedGeometries {
    [id: number]: {
        /** The bounding box of the geometry as a Float32Array. */
        boundingBox: Float32Array;
        /** A boolean indicating whether the geometry has holes. */
        hasHoles: boolean;
        /** An optional file path for the geometry data. */
        geometryFile?: string;
    };
}
/**
 * A streamed asset, which consists of multiple geometries. Each geometry in the asset is identified by a unique number (geometryID), and contains information about its transformation and color.
 */
export interface StreamedAsset {
    /** The unique identifier of the asset. */
    id: number;
    /** An array of geometries associated with the asset. */
    geometries: {
        /** The unique identifier of the geometry. */
        geometryID: number;
        /** The transformation matrix of the geometry as a number array. */
        transformation: number[];
        /** The color of the geometry as a number array. */
        color: number[];
    }[];
}
import { IfcFragmentSettings } from "../../IfcLoader/src";
/**
 * Settings for streaming IFC geometry and assets. Extends {@link IfcFragmentSettings} to inherit common settings.
 */
export declare class IfcStreamingSettings extends IfcFragmentSettings {
    /**
     * Minimum number of geometries to be streamed.
     * Defaults to 10 geometries.
     */
    minGeometrySize: number;
    /**
     * Minimum amount of assets to be streamed.
     * Defaults to 1000 assets.
     */
    minAssetsSize: number;
}
import * as WEBIFC from "web-ifc";
import * as THREE from "three";
export declare class Units {
    factor: number;
    complement: number;
    apply(matrix: THREE.Matrix4): void;
    setUp(webIfc: WEBIFC.IfcAPI): void;
    private getLengthUnits;
    private getScaleMatrix;
}
export type RelationsMap = Map<number, Map<number, number[]>>;
export interface ModelsRelationMap {
    [modelID: string]: RelationsMap;
}
/**
 * Type alias for an array of inverse attribute names.
 */
export type InverseAttributes = [
    "IsDecomposedBy",
    "Decomposes",
    "AssociatedTo",
    "HasAssociations",
    "ClassificationForObjects",
    "IsGroupedBy",
    "HasAssignments",
    "IsDefinedBy",
    "DefinesOcurrence",
    "IsTypedBy",
    "Types",
    "Defines",
    "ContainedInStructure",
    "ContainsElements"
];
export type InverseAttribute = InverseAttributes[number];
import { BufferGeometry } from "three";
import * as THREE from "three";
export declare class TransformHelper {
    getHelper(geometries: BufferGeometry[]): THREE.Object3D<THREE.Object3DEventMap>;
}

}